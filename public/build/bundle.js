!function(g){function t(n){if(I[n])return I[n].exports;var C=I[n]={i:n,l:!1,exports:{}};return g[n].call(C.exports,C,C.exports,t),C.l=!0,C.exports}var I={};t.m=g,t.c=I,t.d=function(g,I,n){t.o(g,I)||Object.defineProperty(g,I,{configurable:!1,enumerable:!0,get:n})},t.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return t.d(I,"a",I),I},t.o=function(g,t){return Object.prototype.hasOwnProperty.call(g,t)},t.p="",t(t.s=0)}([function(g,t,I){g.exports=I(1)},function(module,exports,__webpack_require__){"use strict";eval("\n\n__webpack_require__(2);\n\n__webpack_require__(3);\n\n__webpack_require__(4);\n\n__webpack_require__(5);\n\nconsole.log('im wide awake - its morning');\n\n//THIS WONT RELOAD THE PAGE - GOTTA USE THE get method override hack for that\n// $(document).ready(function () {\n\n//     $( '.search' ).on( 'click', function( e ){\n//         e.preventDefault();\n\n//         let tempQuery = $('.query').val()\n\n//         $.post({\n//             url: '/search',\n//             data: { query: tempQuery }\n//         });\n//     })\n// })\n\nif (false) {\n    module.hot.accept();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3ByaXZhdGUvanMvbWFpbi5qcz9mNjJjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi4vc2Fzcy9zdHlsZS5zYXNzJyk7XG5cbnJlcXVpcmUoJy4uLy4uL25vZGVfbW9kdWxlcy9ob2xkZXJqcy9ob2xkZXIuanMnKTtcblxucmVxdWlyZSgnLi9zZWFyY2guanMnKTtcblxucmVxdWlyZSgnLi9kYXNoYm9hcmQuanMnKTtcblxuY29uc29sZS5sb2coJ2ltIHdpZGUgYXdha2UgLSBpdHMgbW9ybmluZycpO1xuXG4vL1RISVMgV09OVCBSRUxPQUQgVEhFIFBBR0UgLSBHT1RUQSBVU0UgVEhFIGdldCBtZXRob2Qgb3ZlcnJpZGUgaGFjayBmb3IgdGhhdFxuLy8gJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuXG4vLyAgICAgJCggJy5zZWFyY2gnICkub24oICdjbGljaycsIGZ1bmN0aW9uKCBlICl7XG4vLyAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuLy8gICAgICAgICBsZXQgdGVtcFF1ZXJ5ID0gJCgnLnF1ZXJ5JykudmFsKClcblxuLy8gICAgICAgICAkLnBvc3Qoe1xuLy8gICAgICAgICAgICAgdXJsOiAnL3NlYXJjaCcsXG4vLyAgICAgICAgICAgICBkYXRhOiB7IHF1ZXJ5OiB0ZW1wUXVlcnkgfVxuLy8gICAgICAgICB9KTtcbi8vICAgICB9KVxuLy8gfSlcblxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcHJpdmF0ZS9qcy9tYWluLmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3ByaXZhdGUvc2Fzcy9zdHlsZS5zYXNzP2I3YzQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3ByaXZhdGUvc2Fzcy9zdHlsZS5zYXNzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){eval("/*!\n\nHolder - client side image placeholders\nVersion 2.9.4+cabil\nÂ© 2016 Ivan Malopinsky - http://imsky.co\n\nSite:     http://holderjs.com\nIssues:   https://github.com/imsky/holder/issues\nLicense:  MIT\n\n*/\n(function (window) {\n  if (!window.document) return;\n  var document = window.document;\n\n  //https://github.com/inexorabletash/polyfill/blob/master/web.js\n    if (!document.querySelectorAll) {\n      document.querySelectorAll = function (selectors) {\n        var style = document.createElement('style'), elements = [], element;\n        document.documentElement.firstChild.appendChild(style);\n        document._qsa = [];\n\n        style.styleSheet.cssText = selectors + '{x-qsa:expression(document._qsa && document._qsa.push(this))}';\n        window.scrollBy(0, 0);\n        style.parentNode.removeChild(style);\n\n        while (document._qsa.length) {\n          element = document._qsa.shift();\n          element.style.removeAttribute('x-qsa');\n          elements.push(element);\n        }\n        document._qsa = null;\n        return elements;\n      };\n    }\n\n    if (!document.querySelector) {\n      document.querySelector = function (selectors) {\n        var elements = document.querySelectorAll(selectors);\n        return (elements.length) ? elements[0] : null;\n      };\n    }\n\n    if (!document.getElementsByClassName) {\n      document.getElementsByClassName = function (classNames) {\n        classNames = String(classNames).replace(/^|\\s+/g, '.');\n        return document.querySelectorAll(classNames);\n      };\n    }\n\n  //https://github.com/inexorabletash/polyfill\n  // ES5 15.2.3.14 Object.keys ( O )\n  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/keys\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      if (o !== Object(o)) { throw TypeError('Object.keys called on non-object'); }\n      var ret = [], p;\n      for (p in o) {\n        if (Object.prototype.hasOwnProperty.call(o, p)) {\n          ret.push(p);\n        }\n      }\n      return ret;\n    };\n  }\n\n  // ES5 15.4.4.18 Array.prototype.forEach ( callbackfn [ , thisArg ] )\n  // From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach\n  if (!Array.prototype.forEach) {\n    Array.prototype.forEach = function (fun /*, thisp */) {\n      if (this === void 0 || this === null) { throw TypeError(); }\n\n      var t = Object(this);\n      var len = t.length >>> 0;\n      if (typeof fun !== \"function\") { throw TypeError(); }\n\n      var thisp = arguments[1], i;\n      for (i = 0; i < len; i++) {\n        if (i in t) {\n          fun.call(thisp, t[i], i, t);\n        }\n      }\n    };\n  }\n\n  //https://github.com/inexorabletash/polyfill/blob/master/web.js\n  (function (global) {\n    var B64_ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    global.atob = global.atob || function (input) {\n      input = String(input);\n      var position = 0,\n          output = [],\n          buffer = 0, bits = 0, n;\n\n      input = input.replace(/\\s/g, '');\n      if ((input.length % 4) === 0) { input = input.replace(/=+$/, ''); }\n      if ((input.length % 4) === 1) { throw Error('InvalidCharacterError'); }\n      if (/[^+/0-9A-Za-z]/.test(input)) { throw Error('InvalidCharacterError'); }\n\n      while (position < input.length) {\n        n = B64_ALPHABET.indexOf(input.charAt(position));\n        buffer = (buffer << 6) | n;\n        bits += 6;\n\n        if (bits === 24) {\n          output.push(String.fromCharCode((buffer >> 16) & 0xFF));\n          output.push(String.fromCharCode((buffer >>  8) & 0xFF));\n          output.push(String.fromCharCode(buffer & 0xFF));\n          bits = 0;\n          buffer = 0;\n        }\n        position += 1;\n      }\n\n      if (bits === 12) {\n        buffer = buffer >> 4;\n        output.push(String.fromCharCode(buffer & 0xFF));\n      } else if (bits === 18) {\n        buffer = buffer >> 2;\n        output.push(String.fromCharCode((buffer >> 8) & 0xFF));\n        output.push(String.fromCharCode(buffer & 0xFF));\n      }\n\n      return output.join('');\n    };\n\n    global.btoa = global.btoa || function (input) {\n      input = String(input);\n      var position = 0,\n          out = [],\n          o1, o2, o3,\n          e1, e2, e3, e4;\n\n      if (/[^\\x00-\\xFF]/.test(input)) { throw Error('InvalidCharacterError'); }\n\n      while (position < input.length) {\n        o1 = input.charCodeAt(position++);\n        o2 = input.charCodeAt(position++);\n        o3 = input.charCodeAt(position++);\n\n        // 111111 112222 222233 333333\n        e1 = o1 >> 2;\n        e2 = ((o1 & 0x3) << 4) | (o2 >> 4);\n        e3 = ((o2 & 0xf) << 2) | (o3 >> 6);\n        e4 = o3 & 0x3f;\n\n        if (position === input.length + 2) {\n          e3 = 64; e4 = 64;\n        }\n        else if (position === input.length + 1) {\n          e4 = 64;\n        }\n\n        out.push(B64_ALPHABET.charAt(e1),\n                 B64_ALPHABET.charAt(e2),\n                 B64_ALPHABET.charAt(e3),\n                 B64_ALPHABET.charAt(e4));\n      }\n\n      return out.join('');\n    };\n  }(window));\n\n  //https://gist.github.com/jimeh/332357\n  if (!Object.prototype.hasOwnProperty){\n      /*jshint -W001, -W103 */\n      Object.prototype.hasOwnProperty = function(prop) {\n      var proto = this.__proto__ || this.constructor.prototype;\n      return (prop in this) && (!(prop in proto) || proto[prop] !== this[prop]);\n    };\n      /*jshint +W001, +W103 */\n  }\n\n  // @license http://opensource.org/licenses/MIT\n  // copyright Paul Irish 2015\n\n\n  // Date.now() is supported everywhere except IE8. For IE8 we use the Date.now polyfill\n  //   github.com/Financial-Times/polyfill-service/blob/master/polyfills/Date.now/polyfill.js\n  // as Safari 6 doesn't have support for NavigationTiming, we use a Date.now() timestamp for relative values\n\n  // if you want values similar to what you'd get with real perf.now, place this towards the head of the page\n  // but in reality, you're just getting the delta between now() calls, so it's not terribly important where it's placed\n\n\n  (function(){\n\n    if ('performance' in window === false) {\n        window.performance = {};\n    }\n    \n    Date.now = (Date.now || function () {  // thanks IE8\n      return new Date().getTime();\n    });\n\n    if ('now' in window.performance === false){\n      \n      var nowOffset = Date.now();\n      \n      if (performance.timing && performance.timing.navigationStart){\n        nowOffset = performance.timing.navigationStart;\n      }\n\n      window.performance.now = function now(){\n        return Date.now() - nowOffset;\n      };\n    }\n\n  })();\n\n  //requestAnimationFrame polyfill for older Firefox/Chrome versions\n  if (!window.requestAnimationFrame) {\n    if (window.webkitRequestAnimationFrame && window.webkitCancelAnimationFrame) {\n    //https://github.com/Financial-Times/polyfill-service/blob/master/polyfills/requestAnimationFrame/polyfill-webkit.js\n    (function (global) {\n      global.requestAnimationFrame = function (callback) {\n        return webkitRequestAnimationFrame(function () {\n          callback(global.performance.now());\n        });\n      };\n\n      global.cancelAnimationFrame = global.webkitCancelAnimationFrame;\n    }(window));\n    } else if (window.mozRequestAnimationFrame && window.mozCancelAnimationFrame) {\n      //https://github.com/Financial-Times/polyfill-service/blob/master/polyfills/requestAnimationFrame/polyfill-moz.js\n    (function (global) {\n      global.requestAnimationFrame = function (callback) {\n        return mozRequestAnimationFrame(function () {\n          callback(global.performance.now());\n        });\n      };\n\n      global.cancelAnimationFrame = global.mozCancelAnimationFrame;\n    }(window));\n    } else {\n    (function (global) {\n      global.requestAnimationFrame = function (callback) {\n        return global.setTimeout(callback, 1000 / 60);\n      };\n\n      global.cancelAnimationFrame = global.clearTimeout;\n    })(window);\n    }\n  }\n})(this);\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Holder\"] = factory();\n\telse\n\t\troot[\"Holder\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\tHolder.js - client side image placeholders\n\t(c) 2012-2015 Ivan Malopinsky - http://imsky.co\n\t*/\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/*\n\tHolder.js - client side image placeholders\n\t(c) 2012-2016 Ivan Malopinsky - http://imsky.co\n\t*/\n\n\t//Libraries and functions\n\tvar onDomReady = __webpack_require__(2);\n\tvar querystring = __webpack_require__(3);\n\n\tvar SceneGraph = __webpack_require__(6);\n\tvar utils = __webpack_require__(7);\n\tvar SVG = __webpack_require__(8);\n\tvar DOM = __webpack_require__(9);\n\tvar Color = __webpack_require__(10);\n\tvar constants = __webpack_require__(11);\n\n\tvar svgRenderer = __webpack_require__(12);\n\tvar sgCanvasRenderer = __webpack_require__(15);\n\n\tvar extend = utils.extend;\n\tvar dimensionCheck = utils.dimensionCheck;\n\n\t//Constants and definitions\n\tvar SVG_NS = constants.svg_ns;\n\n\tvar Holder = {\n\t    version: constants.version,\n\n\t    /**\n\t     * Adds a theme to default settings\n\t     *\n\t     * @param {string} name Theme name\n\t     * @param {Object} theme Theme object, with foreground, background, size, font, and fontweight properties.\n\t     */\n\t    addTheme: function(name, theme) {\n\t        name != null && theme != null && (App.settings.themes[name] = theme);\n\t        delete App.vars.cache.themeKeys;\n\t        return this;\n\t    },\n\n\t    /**\n\t     * Appends a placeholder to an element\n\t     *\n\t     * @param {string} src Placeholder URL string\n\t     * @param el A selector or a reference to a DOM node\n\t     */\n\t    addImage: function(src, el) {\n\t        //todo: use jquery fallback if available for all QSA references\n\t        var nodes = DOM.getNodeArray(el);\n\t        nodes.forEach(function (node) {\n\t            var img = DOM.newEl('img');\n\t            var domProps = {};\n\t            domProps[App.setup.dataAttr] = src;\n\t            DOM.setAttr(img, domProps);\n\t            node.appendChild(img);\n\t        });\n\t        return this;\n\t    },\n\n\t    /**\n\t     * Sets whether or not an image is updated on resize.\n\t     * If an image is set to be updated, it is immediately rendered.\n\t     *\n\t     * @param {Object} el Image DOM element\n\t     * @param {Boolean} value Resizable update flag value\n\t     */\n\t    setResizeUpdate: function(el, value) {\n\t        if (el.holderData) {\n\t            el.holderData.resizeUpdate = !!value;\n\t            if (el.holderData.resizeUpdate) {\n\t                updateResizableElements(el);\n\t            }\n\t        }\n\t    },\n\n\t    /**\n\t     * Runs Holder with options. By default runs Holder on all images with \"holder.js\" in their source attributes.\n\t     *\n\t     * @param {Object} userOptions Options object, can contain domain, themes, images, and bgnodes properties\n\t     */\n\t    run: function(userOptions) {\n\t        //todo: split processing into separate queues\n\t        userOptions = userOptions || {};\n\t        var engineSettings = {};\n\t        var options = extend(App.settings, userOptions);\n\n\t        App.vars.preempted = true;\n\t        App.vars.dataAttr = options.dataAttr || App.setup.dataAttr;\n\n\t        engineSettings.renderer = options.renderer ? options.renderer : App.setup.renderer;\n\t        if (App.setup.renderers.join(',').indexOf(engineSettings.renderer) === -1) {\n\t            engineSettings.renderer = App.setup.supportsSVG ? 'svg' : (App.setup.supportsCanvas ? 'canvas' : 'html');\n\t        }\n\n\t        var images = DOM.getNodeArray(options.images);\n\t        var bgnodes = DOM.getNodeArray(options.bgnodes);\n\t        var stylenodes = DOM.getNodeArray(options.stylenodes);\n\t        var objects = DOM.getNodeArray(options.objects);\n\n\t        engineSettings.stylesheets = [];\n\t        engineSettings.svgXMLStylesheet = true;\n\t        engineSettings.noFontFallback = !!options.noFontFallback;\n\t        engineSettings.noBackgroundSize = !!options.noBackgroundSize;\n\n\t        stylenodes.forEach(function (styleNode) {\n\t            if (styleNode.attributes.rel && styleNode.attributes.href && styleNode.attributes.rel.value == 'stylesheet') {\n\t                var href = styleNode.attributes.href.value;\n\t                //todo: write isomorphic relative-to-absolute URL function\n\t                var proxyLink = DOM.newEl('a');\n\t                proxyLink.href = href;\n\t                var stylesheetURL = proxyLink.protocol + '//' + proxyLink.host + proxyLink.pathname + proxyLink.search;\n\t                engineSettings.stylesheets.push(stylesheetURL);\n\t            }\n\t        });\n\n\t        bgnodes.forEach(function (bgNode) {\n\t            //Skip processing background nodes if getComputedStyle is unavailable, since only modern browsers would be able to use canvas or SVG to render to background\n\t            if (!global.getComputedStyle) return;\n\t            var backgroundImage = global.getComputedStyle(bgNode, null).getPropertyValue('background-image');\n\t            var dataBackgroundImage = bgNode.getAttribute('data-background-src');\n\t            var rawURL = dataBackgroundImage || backgroundImage;\n\n\t            var holderURL = null;\n\t            var holderString = options.domain + '/';\n\t            var holderStringIndex = rawURL.indexOf(holderString);\n\n\t            if (holderStringIndex === 0) {\n\t                holderURL = rawURL;\n\t            } else if (holderStringIndex === 1 && rawURL[0] === '?') {\n\t                holderURL = rawURL.slice(1);\n\t            } else {\n\t                var fragment = rawURL.substr(holderStringIndex).match(/([^\\\"]*)\"?\\)/);\n\t                if (fragment !== null) {\n\t                    holderURL = fragment[1];\n\t                } else if (rawURL.indexOf('url(') === 0) {\n\t                    throw 'Holder: unable to parse background URL: ' + rawURL;\n\t                }\n\t            }\n\n\t            if (holderURL) {\n\t                var holderFlags = parseURL(holderURL, options);\n\t                if (holderFlags) {\n\t                    prepareDOMElement({\n\t                        mode: 'background',\n\t                        el: bgNode,\n\t                        flags: holderFlags,\n\t                        engineSettings: engineSettings\n\t                    });\n\t                }\n\t            }\n\t        });\n\n\t        objects.forEach(function (object) {\n\t            var objectAttr = {};\n\n\t            try {\n\t                objectAttr.data = object.getAttribute('data');\n\t                objectAttr.dataSrc = object.getAttribute(App.vars.dataAttr);\n\t            } catch (e) {}\n\n\t            var objectHasSrcURL = objectAttr.data != null && objectAttr.data.indexOf(options.domain) === 0;\n\t            var objectHasDataSrcURL = objectAttr.dataSrc != null && objectAttr.dataSrc.indexOf(options.domain) === 0;\n\n\t            if (objectHasSrcURL) {\n\t                prepareImageElement(options, engineSettings, objectAttr.data, object);\n\t            } else if (objectHasDataSrcURL) {\n\t                prepareImageElement(options, engineSettings, objectAttr.dataSrc, object);\n\t            }\n\t        });\n\n\t        images.forEach(function (image) {\n\t            var imageAttr = {};\n\n\t            try {\n\t                imageAttr.src = image.getAttribute('src');\n\t                imageAttr.dataSrc = image.getAttribute(App.vars.dataAttr);\n\t                imageAttr.rendered = image.getAttribute('data-holder-rendered');\n\t            } catch (e) {}\n\n\t            var imageHasSrc = imageAttr.src != null;\n\t            var imageHasDataSrcURL = imageAttr.dataSrc != null && imageAttr.dataSrc.indexOf(options.domain) === 0;\n\t            var imageRendered = imageAttr.rendered != null && imageAttr.rendered == 'true';\n\n\t            if (imageHasSrc) {\n\t                if (imageAttr.src.indexOf(options.domain) === 0) {\n\t                    prepareImageElement(options, engineSettings, imageAttr.src, image);\n\t                } else if (imageHasDataSrcURL) {\n\t                    //Image has a valid data-src and an invalid src\n\t                    if (imageRendered) {\n\t                        //If the placeholder has already been render, re-render it\n\t                        prepareImageElement(options, engineSettings, imageAttr.dataSrc, image);\n\t                    } else {\n\t                        //If the placeholder has not been rendered, check if the image exists and render a fallback if it doesn't\n\t                        (function(src, options, engineSettings, dataSrc, image) {\n\t                            utils.imageExists(src, function(exists) {\n\t                                if (!exists) {\n\t                                    prepareImageElement(options, engineSettings, dataSrc, image);\n\t                                }\n\t                            });\n\t                        })(imageAttr.src, options, engineSettings, imageAttr.dataSrc, image);\n\t                    }\n\t                }\n\t            } else if (imageHasDataSrcURL) {\n\t                prepareImageElement(options, engineSettings, imageAttr.dataSrc, image);\n\t            }\n\t        });\n\n\t        return this;\n\t    }\n\t};\n\n\tvar App = {\n\t    settings: {\n\t        domain: 'holder.js',\n\t        images: 'img',\n\t        objects: 'object',\n\t        bgnodes: 'body .holderjs',\n\t        stylenodes: 'head link.holderjs',\n\t        themes: {\n\t            'gray': {\n\t                bg: '#EEEEEE',\n\t                fg: '#AAAAAA'\n\t            },\n\t            'social': {\n\t                bg: '#3a5a97',\n\t                fg: '#FFFFFF'\n\t            },\n\t            'industrial': {\n\t                bg: '#434A52',\n\t                fg: '#C2F200'\n\t            },\n\t            'sky': {\n\t                bg: '#0D8FDB',\n\t                fg: '#FFFFFF'\n\t            },\n\t            'vine': {\n\t                bg: '#39DBAC',\n\t                fg: '#1E292C'\n\t            },\n\t            'lava': {\n\t                bg: '#F8591A',\n\t                fg: '#1C2846'\n\t            }\n\t        }\n\t    },\n\t    defaults: {\n\t        size: 10,\n\t        units: 'pt',\n\t        scale: 1 / 16\n\t    }\n\t};\n\n\t/**\n\t * Processes provided source attribute and sets up the appropriate rendering workflow\n\t *\n\t * @private\n\t * @param options Instance options from Holder.run\n\t * @param renderSettings Instance configuration\n\t * @param src Image URL\n\t * @param el Image DOM element\n\t */\n\tfunction prepareImageElement(options, engineSettings, src, el) {\n\t    var holderFlags = parseURL(src.substr(src.lastIndexOf(options.domain)), options);\n\t    if (holderFlags) {\n\t        prepareDOMElement({\n\t            mode: null,\n\t            el: el,\n\t            flags: holderFlags,\n\t            engineSettings: engineSettings\n\t        });\n\t    }\n\t}\n\n\t/**\n\t * Processes a Holder URL and extracts configuration from query string\n\t *\n\t * @private\n\t * @param url URL\n\t * @param instanceOptions Instance options from Holder.run\n\t */\n\tfunction parseURL(url, instanceOptions) {\n\t    var holder = {\n\t        theme: extend(App.settings.themes.gray, null),\n\t        stylesheets: instanceOptions.stylesheets,\n\t        instanceOptions: instanceOptions\n\t    };\n\n\t    var firstQuestionMark = url.indexOf('?');\n\t    var parts = [url];\n\n\t    if (firstQuestionMark !== -1) {\n\t        parts = [url.slice(0, firstQuestionMark), url.slice(firstQuestionMark + 1)];\n\t    }\n\n\t    var basics = parts[0].split('/');\n\n\t    holder.holderURL = url;\n\n\t    var dimensions = basics[1];\n\t    var dimensionData = dimensions.match(/([\\d]+p?)x([\\d]+p?)/);\n\n\t    if (!dimensionData) return false;\n\n\t    holder.fluid = dimensions.indexOf('p') !== -1;\n\n\t    holder.dimensions = {\n\t        width: dimensionData[1].replace('p', '%'),\n\t        height: dimensionData[2].replace('p', '%')\n\t    };\n\n\t    if (parts.length === 2) {\n\t        var options = querystring.parse(parts[1]);\n\n\t        // Dimensions\n\n\t        if (utils.truthy(options.ratio)) {\n\t            holder.fluid = true;\n\t            var ratioWidth = parseFloat(holder.dimensions.width.replace('%', ''));\n\t            var ratioHeight = parseFloat(holder.dimensions.height.replace('%', ''));\n\n\t            ratioHeight = Math.floor(100 * (ratioHeight / ratioWidth));\n\t            ratioWidth = 100;\n\n\t            holder.dimensions.width = ratioWidth + '%';\n\t            holder.dimensions.height = ratioHeight + '%';\n\t        }\n\n\t        holder.auto = utils.truthy(options.auto);\n\n\t        // Colors\n\n\t        if (options.bg) {\n\t            holder.theme.bg = utils.parseColor(options.bg);\n\t        }\n\n\t        if (options.fg) {\n\t            holder.theme.fg = utils.parseColor(options.fg);\n\t        }\n\n\t        //todo: add automatic foreground to themes without foreground\n\t        if (options.bg && !options.fg) {\n\t            holder.autoFg = true;\n\t        }\n\n\t        if (options.theme && holder.instanceOptions.themes.hasOwnProperty(options.theme)) {\n\t            holder.theme = extend(holder.instanceOptions.themes[options.theme], null);\n\t        }\n\n\t        // Text\n\n\t        if (options.text) {\n\t            holder.text = options.text;\n\t        }\n\n\t        if (options.textmode) {\n\t            holder.textmode = options.textmode;\n\t        }\n\n\t        if (options.size) {\n\t            holder.size = options.size;\n\t        }\n\n\t        if (options.font) {\n\t            holder.font = options.font;\n\t        }\n\n\t        if (options.align) {\n\t            holder.align = options.align;\n\t        }\n\n\t        if (options.lineWrap) {\n\t            holder.lineWrap = options.lineWrap;\n\t        }\n\n\t        holder.nowrap = utils.truthy(options.nowrap);\n\n\t        // Miscellaneous\n\n\t        holder.outline = utils.truthy(options.outline);\n\n\t        if (utils.truthy(options.random)) {\n\t            App.vars.cache.themeKeys = App.vars.cache.themeKeys || Object.keys(holder.instanceOptions.themes);\n\t            var _theme = App.vars.cache.themeKeys[0 | Math.random() * App.vars.cache.themeKeys.length];\n\t            holder.theme = extend(holder.instanceOptions.themes[_theme], null);\n\t        }\n\t    }\n\n\t    return holder;\n\t}\n\n\t/**\n\t * Modifies the DOM to fit placeholders and sets up resizable image callbacks (for fluid and automatically sized placeholders)\n\t *\n\t * @private\n\t * @param settings DOM prep settings\n\t */\n\tfunction prepareDOMElement(prepSettings) {\n\t    var mode = prepSettings.mode;\n\t    var el = prepSettings.el;\n\t    var flags = prepSettings.flags;\n\t    var _engineSettings = prepSettings.engineSettings;\n\t    var dimensions = flags.dimensions,\n\t        theme = flags.theme;\n\t    var dimensionsCaption = dimensions.width + 'x' + dimensions.height;\n\t    mode = mode == null ? (flags.fluid ? 'fluid' : 'image') : mode;\n\t    var holderTemplateRe = /holder_([a-z]+)/g;\n\t    var dimensionsInText = false;\n\n\t    if (flags.text != null) {\n\t        theme.text = flags.text;\n\n\t        //<object> SVG embedding doesn't parse Unicode properly\n\t        if (el.nodeName.toLowerCase() === 'object') {\n\t            var textLines = theme.text.split('\\\\n');\n\t            for (var k = 0; k < textLines.length; k++) {\n\t                textLines[k] = utils.encodeHtmlEntity(textLines[k]);\n\t            }\n\t            theme.text = textLines.join('\\\\n');\n\t        }\n\t    }\n\n\t    if (theme.text) {\n\t        var holderTemplateMatches = theme.text.match(holderTemplateRe);\n\n\t        if (holderTemplateMatches !== null) {\n\t            //todo: optimize template replacement\n\t            holderTemplateMatches.forEach(function (match) {\n\t                if (match === 'holder_dimensions') {\n\t                    theme.text = theme.text.replace(match, dimensionsCaption);\n\t                }\n\t            });\n\t        }\n\t    }\n\n\t    var holderURL = flags.holderURL;\n\t    var engineSettings = extend(_engineSettings, null);\n\n\t    if (flags.font) {\n\t        /*\n\t        If external fonts are used in a <img> placeholder rendered with SVG, Holder falls back to canvas.\n\n\t        This is done because Firefox and Chrome disallow embedded SVGs from referencing external assets.\n\t        The workaround is either to change the placeholder tag from <img> to <object> or to use the canvas renderer.\n\t        */\n\t        theme.font = flags.font;\n\t        if (!engineSettings.noFontFallback && el.nodeName.toLowerCase() === 'img' && App.setup.supportsCanvas && engineSettings.renderer === 'svg') {\n\t            engineSettings = extend(engineSettings, {\n\t                renderer: 'canvas'\n\t            });\n\t        }\n\t    }\n\n\t    //Chrome and Opera require a quick 10ms re-render if web fonts are used with canvas\n\t    if (flags.font && engineSettings.renderer == 'canvas') {\n\t        engineSettings.reRender = true;\n\t    }\n\n\t    if (mode == 'background') {\n\t        if (el.getAttribute('data-background-src') == null) {\n\t            DOM.setAttr(el, {\n\t                'data-background-src': holderURL\n\t            });\n\t        }\n\t    } else {\n\t        var domProps = {};\n\t        domProps[App.vars.dataAttr] = holderURL;\n\t        DOM.setAttr(el, domProps);\n\t    }\n\n\t    flags.theme = theme;\n\n\t    //todo consider using all renderSettings in holderData\n\t    el.holderData = {\n\t        flags: flags,\n\t        engineSettings: engineSettings\n\t    };\n\n\t    if (mode == 'image' || mode == 'fluid') {\n\t        DOM.setAttr(el, {\n\t            'alt': theme.text ? (dimensionsInText ? theme.text : theme.text + ' [' + dimensionsCaption + ']') : dimensionsCaption\n\t        });\n\t    }\n\n\t    var renderSettings = {\n\t        mode: mode,\n\t        el: el,\n\t        holderSettings: {\n\t            dimensions: dimensions,\n\t            theme: theme,\n\t            flags: flags\n\t        },\n\t        engineSettings: engineSettings\n\t    };\n\n\t    if (mode == 'image') {\n\t        if (!flags.auto) {\n\t            el.style.width = dimensions.width + 'px';\n\t            el.style.height = dimensions.height + 'px';\n\t        }\n\n\t        if (engineSettings.renderer == 'html') {\n\t            el.style.backgroundColor = theme.bg;\n\t        } else {\n\t            render(renderSettings);\n\n\t            if (flags.textmode == 'exact') {\n\t                el.holderData.resizeUpdate = true;\n\t                App.vars.resizableImages.push(el);\n\t                updateResizableElements(el);\n\t            }\n\t        }\n\t    } else if (mode == 'background' && engineSettings.renderer != 'html') {\n\t        render(renderSettings);\n\t    } else if (mode == 'fluid') {\n\t        el.holderData.resizeUpdate = true;\n\n\t        if (dimensions.height.slice(-1) == '%') {\n\t            el.style.height = dimensions.height;\n\t        } else if (flags.auto == null || !flags.auto) {\n\t            el.style.height = dimensions.height + 'px';\n\t        }\n\t        if (dimensions.width.slice(-1) == '%') {\n\t            el.style.width = dimensions.width;\n\t        } else if (flags.auto == null || !flags.auto) {\n\t            el.style.width = dimensions.width + 'px';\n\t        }\n\t        if (el.style.display == 'inline' || el.style.display === '' || el.style.display == 'none') {\n\t            el.style.display = 'block';\n\t        }\n\n\t        setInitialDimensions(el);\n\n\t        if (engineSettings.renderer == 'html') {\n\t            el.style.backgroundColor = theme.bg;\n\t        } else {\n\t            App.vars.resizableImages.push(el);\n\t            updateResizableElements(el);\n\t        }\n\t    }\n\t}\n\n\t/**\n\t * Core function that takes output from renderers and sets it as the source or background-image of the target element\n\t *\n\t * @private\n\t * @param renderSettings Renderer settings\n\t */\n\tfunction render(renderSettings) {\n\t    var image = null;\n\t    var mode = renderSettings.mode;\n\t    var el = renderSettings.el;\n\t    var holderSettings = renderSettings.holderSettings;\n\t    var engineSettings = renderSettings.engineSettings;\n\n\t    switch (engineSettings.renderer) {\n\t        case 'svg':\n\t            if (!App.setup.supportsSVG) return;\n\t            break;\n\t        case 'canvas':\n\t            if (!App.setup.supportsCanvas) return;\n\t            break;\n\t        default:\n\t            return;\n\t    }\n\n\t    //todo: move generation of scene up to flag generation to reduce extra object creation\n\t    var scene = {\n\t        width: holderSettings.dimensions.width,\n\t        height: holderSettings.dimensions.height,\n\t        theme: holderSettings.theme,\n\t        flags: holderSettings.flags\n\t    };\n\n\t    var sceneGraph = buildSceneGraph(scene);\n\n\t    function getRenderedImage() {\n\t        var image = null;\n\t        switch (engineSettings.renderer) {\n\t            case 'canvas':\n\t                image = sgCanvasRenderer(sceneGraph, renderSettings);\n\t                break;\n\t            case 'svg':\n\t                image = svgRenderer(sceneGraph, renderSettings);\n\t                break;\n\t            default:\n\t                throw 'Holder: invalid renderer: ' + engineSettings.renderer;\n\t        }\n\n\t        return image;\n\t    }\n\n\t    image = getRenderedImage();\n\n\t    if (image == null) {\n\t        throw 'Holder: couldn\\'t render placeholder';\n\t    }\n\n\t    //todo: add <object> canvas rendering\n\t    if (mode == 'background') {\n\t        el.style.backgroundImage = 'url(' + image + ')';\n\n\t        if (!engineSettings.noBackgroundSize) {\n\t            el.style.backgroundSize = scene.width + 'px ' + scene.height + 'px';\n\t        }\n\t    } else {\n\t        if (el.nodeName.toLowerCase() === 'img') {\n\t            DOM.setAttr(el, {\n\t                'src': image\n\t            });\n\t        } else if (el.nodeName.toLowerCase() === 'object') {\n\t            DOM.setAttr(el, {\n\t                'data': image,\n\t                'type': 'image/svg+xml'\n\t            });\n\t        }\n\t        if (engineSettings.reRender) {\n\t            global.setTimeout(function () {\n\t                var image = getRenderedImage();\n\t                if (image == null) {\n\t                    throw 'Holder: couldn\\'t render placeholder';\n\t                }\n\t                //todo: refactor this code into a function\n\t                if (el.nodeName.toLowerCase() === 'img') {\n\t                    DOM.setAttr(el, {\n\t                        'src': image\n\t                    });\n\t                } else if (el.nodeName.toLowerCase() === 'object') {\n\t                    DOM.setAttr(el, {\n\t                        'data': image,\n\t                        'type': 'image/svg+xml'\n\t                    });\n\t                }\n\t            }, 150);\n\t        }\n\t    }\n\t    //todo: account for re-rendering\n\t    DOM.setAttr(el, {\n\t        'data-holder-rendered': true\n\t    });\n\t}\n\n\t/**\n\t * Core function that takes a Holder scene description and builds a scene graph\n\t *\n\t * @private\n\t * @param scene Holder scene object\n\t */\n\t//todo: make this function reusable\n\t//todo: merge app defaults and setup properties into the scene argument\n\tfunction buildSceneGraph(scene) {\n\t    var fontSize = App.defaults.size;\n\t    if (parseFloat(scene.theme.size)) {\n\t        fontSize = scene.theme.size;\n\t    } else if (parseFloat(scene.flags.size)) {\n\t        fontSize = scene.flags.size;\n\t    }\n\n\t    scene.font = {\n\t        family: scene.theme.font ? scene.theme.font : 'Arial, Helvetica, Open Sans, sans-serif',\n\t        size: textSize(scene.width, scene.height, fontSize, App.defaults.scale),\n\t        units: scene.theme.units ? scene.theme.units : App.defaults.units,\n\t        weight: scene.theme.fontweight ? scene.theme.fontweight : 'bold'\n\t    };\n\n\t    scene.text = scene.theme.text || Math.floor(scene.width) + 'x' + Math.floor(scene.height);\n\n\t    scene.noWrap = scene.theme.nowrap || scene.flags.nowrap;\n\n\t    scene.align = scene.theme.align || scene.flags.align || 'center';\n\n\t    switch (scene.flags.textmode) {\n\t        case 'literal':\n\t            scene.text = scene.flags.dimensions.width + 'x' + scene.flags.dimensions.height;\n\t            break;\n\t        case 'exact':\n\t            if (!scene.flags.exactDimensions) break;\n\t            scene.text = Math.floor(scene.flags.exactDimensions.width) + 'x' + Math.floor(scene.flags.exactDimensions.height);\n\t            break;\n\t    }\n\n\t    var lineWrap = scene.flags.lineWrap || App.setup.lineWrapRatio;\n\t    var sceneMargin = scene.width * lineWrap;\n\t    var maxLineWidth = sceneMargin;\n\n\t    var sceneGraph = new SceneGraph({\n\t        width: scene.width,\n\t        height: scene.height\n\t    });\n\n\t    var Shape = sceneGraph.Shape;\n\n\t    var holderBg = new Shape.Rect('holderBg', {\n\t        fill: scene.theme.bg\n\t    });\n\n\t    holderBg.resize(scene.width, scene.height);\n\t    sceneGraph.root.add(holderBg);\n\n\t    if (scene.flags.outline) {\n\t        var outlineColor = new Color(holderBg.properties.fill);\n\t        outlineColor = outlineColor.lighten(outlineColor.lighterThan('7f7f7f') ? -0.1 : 0.1);\n\t        holderBg.properties.outline = {\n\t            fill: outlineColor.toHex(true),\n\t            width: 2\n\t        };\n\t    }\n\n\t    var holderTextColor = scene.theme.fg;\n\n\t    if (scene.flags.autoFg) {\n\t        var holderBgColor = new Color(holderBg.properties.fill);\n\t        var lightColor = new Color('fff');\n\t        var darkColor = new Color('000', {\n\t            'alpha': 0.285714\n\t        });\n\n\t        holderTextColor = holderBgColor.blendAlpha(holderBgColor.lighterThan('7f7f7f') ? darkColor : lightColor).toHex(true);\n\t    }\n\n\t    var holderTextGroup = new Shape.Group('holderTextGroup', {\n\t        text: scene.text,\n\t        align: scene.align,\n\t        font: scene.font,\n\t        fill: holderTextColor\n\t    });\n\n\t    holderTextGroup.moveTo(null, null, 1);\n\t    sceneGraph.root.add(holderTextGroup);\n\n\t    var tpdata = holderTextGroup.textPositionData = stagingRenderer(sceneGraph);\n\t    if (!tpdata) {\n\t        throw 'Holder: staging fallback not supported yet.';\n\t    }\n\t    holderTextGroup.properties.leading = tpdata.boundingBox.height;\n\n\t    var textNode = null;\n\t    var line = null;\n\n\t    function finalizeLine(parent, line, width, height) {\n\t        line.width = width;\n\t        line.height = height;\n\t        parent.width = Math.max(parent.width, line.width);\n\t        parent.height += line.height;\n\t    }\n\n\t    if (tpdata.lineCount > 1) {\n\t        var offsetX = 0;\n\t        var offsetY = 0;\n\t        var lineIndex = 0;\n\t        var lineKey;\n\t        line = new Shape.Group('line' + lineIndex);\n\n\t        //Double margin so that left/right-aligned next is not flush with edge of image\n\t        if (scene.align === 'left' || scene.align === 'right') {\n\t            maxLineWidth = scene.width * (1 - (1 - lineWrap) * 2);\n\t        }\n\n\t        for (var i = 0; i < tpdata.words.length; i++) {\n\t            var word = tpdata.words[i];\n\t            textNode = new Shape.Text(word.text);\n\t            var newline = word.text == '\\\\n';\n\t            if (!scene.noWrap && (offsetX + word.width >= maxLineWidth || newline === true)) {\n\t                finalizeLine(holderTextGroup, line, offsetX, holderTextGroup.properties.leading);\n\t                holderTextGroup.add(line);\n\t                offsetX = 0;\n\t                offsetY += holderTextGroup.properties.leading;\n\t                lineIndex += 1;\n\t                line = new Shape.Group('line' + lineIndex);\n\t                line.y = offsetY;\n\t            }\n\t            if (newline === true) {\n\t                continue;\n\t            }\n\t            textNode.moveTo(offsetX, 0);\n\t            offsetX += tpdata.spaceWidth + word.width;\n\t            line.add(textNode);\n\t        }\n\n\t        finalizeLine(holderTextGroup, line, offsetX, holderTextGroup.properties.leading);\n\t        holderTextGroup.add(line);\n\n\t        if (scene.align === 'left') {\n\t            holderTextGroup.moveTo(scene.width - sceneMargin, null, null);\n\t        } else if (scene.align === 'right') {\n\t            for (lineKey in holderTextGroup.children) {\n\t                line = holderTextGroup.children[lineKey];\n\t                line.moveTo(scene.width - line.width, null, null);\n\t            }\n\n\t            holderTextGroup.moveTo(0 - (scene.width - sceneMargin), null, null);\n\t        } else {\n\t            for (lineKey in holderTextGroup.children) {\n\t                line = holderTextGroup.children[lineKey];\n\t                line.moveTo((holderTextGroup.width - line.width) / 2, null, null);\n\t            }\n\n\t            holderTextGroup.moveTo((scene.width - holderTextGroup.width) / 2, null, null);\n\t        }\n\n\t        holderTextGroup.moveTo(null, (scene.height - holderTextGroup.height) / 2, null);\n\n\t        //If the text exceeds vertical space, move it down so the first line is visible\n\t        if ((scene.height - holderTextGroup.height) / 2 < 0) {\n\t            holderTextGroup.moveTo(null, 0, null);\n\t        }\n\t    } else {\n\t        textNode = new Shape.Text(scene.text);\n\t        line = new Shape.Group('line0');\n\t        line.add(textNode);\n\t        holderTextGroup.add(line);\n\n\t        if (scene.align === 'left') {\n\t            holderTextGroup.moveTo(scene.width - sceneMargin, null, null);\n\t        } else if (scene.align === 'right') {\n\t            holderTextGroup.moveTo(0 - (scene.width - sceneMargin), null, null);\n\t        } else {\n\t            holderTextGroup.moveTo((scene.width - tpdata.boundingBox.width) / 2, null, null);\n\t        }\n\n\t        holderTextGroup.moveTo(null, (scene.height - tpdata.boundingBox.height) / 2, null);\n\t    }\n\n\t    //todo: renderlist\n\t    return sceneGraph;\n\t}\n\n\t/**\n\t * Adaptive text sizing function\n\t *\n\t * @private\n\t * @param width Parent width\n\t * @param height Parent height\n\t * @param fontSize Requested text size\n\t * @param scale Proportional scale of text\n\t */\n\tfunction textSize(width, height, fontSize, scale) {\n\t    var stageWidth = parseInt(width, 10);\n\t    var stageHeight = parseInt(height, 10);\n\n\t    var bigSide = Math.max(stageWidth, stageHeight);\n\t    var smallSide = Math.min(stageWidth, stageHeight);\n\n\t    var newHeight = 0.8 * Math.min(smallSide, bigSide * scale);\n\t    return Math.round(Math.max(fontSize, newHeight));\n\t}\n\n\t/**\n\t * Iterates over resizable (fluid or auto) placeholders and renders them\n\t *\n\t * @private\n\t * @param element Optional element selector, specified only if a specific element needs to be re-rendered\n\t */\n\tfunction updateResizableElements(element) {\n\t    var images;\n\t    if (element == null || element.nodeType == null) {\n\t        images = App.vars.resizableImages;\n\t    } else {\n\t        images = [element];\n\t    }\n\t    for (var i = 0, l = images.length; i < l; i++) {\n\t        var el = images[i];\n\t        if (el.holderData) {\n\t            var flags = el.holderData.flags;\n\t            var dimensions = dimensionCheck(el);\n\t            if (dimensions) {\n\t                if (!el.holderData.resizeUpdate) {\n\t                    continue;\n\t                }\n\n\t                if (flags.fluid && flags.auto) {\n\t                    var fluidConfig = el.holderData.fluidConfig;\n\t                    switch (fluidConfig.mode) {\n\t                        case 'width':\n\t                            dimensions.height = dimensions.width / fluidConfig.ratio;\n\t                            break;\n\t                        case 'height':\n\t                            dimensions.width = dimensions.height * fluidConfig.ratio;\n\t                            break;\n\t                    }\n\t                }\n\n\t                var settings = {\n\t                    mode: 'image',\n\t                    holderSettings: {\n\t                        dimensions: dimensions,\n\t                        theme: flags.theme,\n\t                        flags: flags\n\t                    },\n\t                    el: el,\n\t                    engineSettings: el.holderData.engineSettings\n\t                };\n\n\t                if (flags.textmode == 'exact') {\n\t                    flags.exactDimensions = dimensions;\n\t                    settings.holderSettings.dimensions = flags.dimensions;\n\t                }\n\n\t                render(settings);\n\t            } else {\n\t                setInvisible(el);\n\t            }\n\t        }\n\t    }\n\t}\n\n\t/**\n\t * Sets up aspect ratio metadata for fluid placeholders, in order to preserve proportions when resizing\n\t *\n\t * @private\n\t * @param el Image DOM element\n\t */\n\tfunction setInitialDimensions(el) {\n\t    if (el.holderData) {\n\t        var dimensions = dimensionCheck(el);\n\t        if (dimensions) {\n\t            var flags = el.holderData.flags;\n\n\t            var fluidConfig = {\n\t                fluidHeight: flags.dimensions.height.slice(-1) == '%',\n\t                fluidWidth: flags.dimensions.width.slice(-1) == '%',\n\t                mode: null,\n\t                initialDimensions: dimensions\n\t            };\n\n\t            if (fluidConfig.fluidWidth && !fluidConfig.fluidHeight) {\n\t                fluidConfig.mode = 'width';\n\t                fluidConfig.ratio = fluidConfig.initialDimensions.width / parseFloat(flags.dimensions.height);\n\t            } else if (!fluidConfig.fluidWidth && fluidConfig.fluidHeight) {\n\t                fluidConfig.mode = 'height';\n\t                fluidConfig.ratio = parseFloat(flags.dimensions.width) / fluidConfig.initialDimensions.height;\n\t            }\n\n\t            el.holderData.fluidConfig = fluidConfig;\n\t        } else {\n\t            setInvisible(el);\n\t        }\n\t    }\n\t}\n\n\t/**\n\t * Iterates through all current invisible images, and if they're visible, renders them and removes them from further checks. Runs every animation frame.\n\t *\n\t * @private\n\t */\n\tfunction visibilityCheck() {\n\t    var renderableImages = [];\n\t    var keys = Object.keys(App.vars.invisibleImages);\n\t    var el;\n\n\t    keys.forEach(function (key) {\n\t        el = App.vars.invisibleImages[key];\n\t        if (dimensionCheck(el) && el.nodeName.toLowerCase() == 'img') {\n\t            renderableImages.push(el);\n\t            delete App.vars.invisibleImages[key];\n\t        }\n\t    });\n\n\t    if (renderableImages.length) {\n\t        Holder.run({\n\t            images: renderableImages\n\t        });\n\t    }\n\n\t    // Done to prevent 100% CPU usage via aggressive calling of requestAnimationFrame\n\t    setTimeout(function () {\n\t        global.requestAnimationFrame(visibilityCheck);\n\t    }, 10);\n\t}\n\n\t/**\n\t * Starts checking for invisible placeholders if not doing so yet. Does nothing otherwise.\n\t *\n\t * @private\n\t */\n\tfunction startVisibilityCheck() {\n\t    if (!App.vars.visibilityCheckStarted) {\n\t        global.requestAnimationFrame(visibilityCheck);\n\t        App.vars.visibilityCheckStarted = true;\n\t    }\n\t}\n\n\t/**\n\t * Sets a unique ID for an image detected to be invisible and adds it to the map of invisible images checked by visibilityCheck\n\t *\n\t * @private\n\t * @param el Invisible DOM element\n\t */\n\tfunction setInvisible(el) {\n\t    if (!el.holderData.invisibleId) {\n\t        App.vars.invisibleId += 1;\n\t        App.vars.invisibleImages['i' + App.vars.invisibleId] = el;\n\t        el.holderData.invisibleId = App.vars.invisibleId;\n\t    }\n\t}\n\n\t//todo: see if possible to convert stagingRenderer to use HTML only\n\tvar stagingRenderer = (function() {\n\t    var svg = null,\n\t        stagingText = null,\n\t        stagingTextNode = null;\n\t    return function(graph) {\n\t        var rootNode = graph.root;\n\t        if (App.setup.supportsSVG) {\n\t            var firstTimeSetup = false;\n\t            var tnode = function(text) {\n\t                return document.createTextNode(text);\n\t            };\n\t            if (svg == null || svg.parentNode !== document.body) {\n\t                firstTimeSetup = true;\n\t            }\n\n\t            svg = SVG.initSVG(svg, rootNode.properties.width, rootNode.properties.height);\n\t            //Show staging element before staging\n\t            svg.style.display = 'block';\n\n\t            if (firstTimeSetup) {\n\t                stagingText = DOM.newEl('text', SVG_NS);\n\t                stagingTextNode = tnode(null);\n\t                DOM.setAttr(stagingText, {\n\t                    x: 0\n\t                });\n\t                stagingText.appendChild(stagingTextNode);\n\t                svg.appendChild(stagingText);\n\t                document.body.appendChild(svg);\n\t                svg.style.visibility = 'hidden';\n\t                svg.style.position = 'absolute';\n\t                svg.style.top = '-100%';\n\t                svg.style.left = '-100%';\n\t                //todo: workaround for zero-dimension <svg> tag in Opera 12\n\t                //svg.setAttribute('width', 0);\n\t                //svg.setAttribute('height', 0);\n\t            }\n\n\t            var holderTextGroup = rootNode.children.holderTextGroup;\n\t            var htgProps = holderTextGroup.properties;\n\t            DOM.setAttr(stagingText, {\n\t                'y': htgProps.font.size,\n\t                'style': utils.cssProps({\n\t                    'font-weight': htgProps.font.weight,\n\t                    'font-size': htgProps.font.size + htgProps.font.units,\n\t                    'font-family': htgProps.font.family\n\t                })\n\t            });\n\n\t            //Get bounding box for the whole string (total width and height)\n\t            stagingTextNode.nodeValue = htgProps.text;\n\t            var stagingTextBBox = stagingText.getBBox();\n\n\t            //Get line count and split the string into words\n\t            var lineCount = Math.ceil(stagingTextBBox.width / rootNode.properties.width);\n\t            var words = htgProps.text.split(' ');\n\t            var newlines = htgProps.text.match(/\\\\n/g);\n\t            lineCount += newlines == null ? 0 : newlines.length;\n\n\t            //Get bounding box for the string with spaces removed\n\t            stagingTextNode.nodeValue = htgProps.text.replace(/[ ]+/g, '');\n\t            var computedNoSpaceLength = stagingText.getComputedTextLength();\n\n\t            //Compute average space width\n\t            var diffLength = stagingTextBBox.width - computedNoSpaceLength;\n\t            var spaceWidth = Math.round(diffLength / Math.max(1, words.length - 1));\n\n\t            //Get widths for every word with space only if there is more than one line\n\t            var wordWidths = [];\n\t            if (lineCount > 1) {\n\t                stagingTextNode.nodeValue = '';\n\t                for (var i = 0; i < words.length; i++) {\n\t                    if (words[i].length === 0) continue;\n\t                    stagingTextNode.nodeValue = utils.decodeHtmlEntity(words[i]);\n\t                    var bbox = stagingText.getBBox();\n\t                    wordWidths.push({\n\t                        text: words[i],\n\t                        width: bbox.width\n\t                    });\n\t                }\n\t            }\n\n\t            //Hide staging element after staging\n\t            svg.style.display = 'none';\n\n\t            return {\n\t                spaceWidth: spaceWidth,\n\t                lineCount: lineCount,\n\t                boundingBox: stagingTextBBox,\n\t                words: wordWidths\n\t            };\n\t        } else {\n\t            //todo: canvas fallback for measuring text on android 2.3\n\t            return false;\n\t        }\n\t    };\n\t})();\n\n\t//Helpers\n\n\t/**\n\t * Prevents a function from being called too often, waits until a timer elapses to call it again\n\t *\n\t * @param fn Function to call\n\t */\n\tfunction debounce(fn) {\n\t    if (!App.vars.debounceTimer) fn.call(this);\n\t    if (App.vars.debounceTimer) global.clearTimeout(App.vars.debounceTimer);\n\t    App.vars.debounceTimer = global.setTimeout(function() {\n\t        App.vars.debounceTimer = null;\n\t        fn.call(this);\n\t    }, App.setup.debounce);\n\t}\n\n\t/**\n\t * Holder-specific resize/orientation change callback, debounced to prevent excessive execution\n\t */\n\tfunction resizeEvent() {\n\t    debounce(function() {\n\t        updateResizableElements(null);\n\t    });\n\t}\n\n\t//Set up flags\n\n\tfor (var flag in App.flags) {\n\t    if (!App.flags.hasOwnProperty(flag)) continue;\n\t    App.flags[flag].match = function(val) {\n\t        return val.match(this.regex);\n\t    };\n\t}\n\n\t//Properties set once on setup\n\n\tApp.setup = {\n\t    renderer: 'html',\n\t    debounce: 100,\n\t    ratio: 1,\n\t    supportsCanvas: false,\n\t    supportsSVG: false,\n\t    lineWrapRatio: 0.9,\n\t    dataAttr: 'data-src',\n\t    renderers: ['html', 'canvas', 'svg']\n\t};\n\n\t//Properties modified during runtime\n\n\tApp.vars = {\n\t    preempted: false,\n\t    resizableImages: [],\n\t    invisibleImages: {},\n\t    invisibleId: 0,\n\t    visibilityCheckStarted: false,\n\t    debounceTimer: null,\n\t    cache: {}\n\t};\n\n\t//Pre-flight\n\n\t(function() {\n\t    var canvas = DOM.newEl('canvas');\n\n\t    if (canvas.getContext) {\n\t        if (canvas.toDataURL('image/png').indexOf('data:image/png') != -1) {\n\t            App.setup.renderer = 'canvas';\n\t            App.setup.supportsCanvas = true;\n\t        }\n\t    }\n\n\t    if (!!document.createElementNS && !!document.createElementNS(SVG_NS, 'svg').createSVGRect) {\n\t        App.setup.renderer = 'svg';\n\t        App.setup.supportsSVG = true;\n\t    }\n\t})();\n\n\t//Starts checking for invisible placeholders\n\tstartVisibilityCheck();\n\n\tif (onDomReady) {\n\t    onDomReady(function() {\n\t        if (!App.vars.preempted) {\n\t            Holder.run();\n\t        }\n\t        if (global.addEventListener) {\n\t            global.addEventListener('resize', resizeEvent, false);\n\t            global.addEventListener('orientationchange', resizeEvent, false);\n\t        } else {\n\t            global.attachEvent('onresize', resizeEvent);\n\t        }\n\n\t        if (typeof global.Turbolinks == 'object') {\n\t            global.document.addEventListener('page:change', function() {\n\t                Holder.run();\n\t            });\n\t        }\n\t    });\n\t}\n\n\tmodule.exports = Holder;\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * onDomReady.js 1.4.0 (c) 2013 Tubal Martin - MIT license\n\t *\n\t * Specially modified to work with Holder.js\n\t */\n\n\tfunction _onDomReady(win) {\n\t    //Lazy loading fix for Firefox < 3.6\n\t    //http://webreflection.blogspot.com/2009/11/195-chars-to-help-lazy-loading.html\n\t    if (document.readyState == null && document.addEventListener) {\n\t        document.addEventListener(\"DOMContentLoaded\", function DOMContentLoaded() {\n\t            document.removeEventListener(\"DOMContentLoaded\", DOMContentLoaded, false);\n\t            document.readyState = \"complete\";\n\t        }, false);\n\t        document.readyState = \"loading\";\n\t    }\n\t    \n\t    var doc = win.document,\n\t        docElem = doc.documentElement,\n\t    \n\t        LOAD = \"load\",\n\t        FALSE = false,\n\t        ONLOAD = \"on\"+LOAD,\n\t        COMPLETE = \"complete\",\n\t        READYSTATE = \"readyState\",\n\t        ATTACHEVENT = \"attachEvent\",\n\t        DETACHEVENT = \"detachEvent\",\n\t        ADDEVENTLISTENER = \"addEventListener\",\n\t        DOMCONTENTLOADED = \"DOMContentLoaded\",\n\t        ONREADYSTATECHANGE = \"onreadystatechange\",\n\t        REMOVEEVENTLISTENER = \"removeEventListener\",\n\t    \n\t        // W3C Event model\n\t        w3c = ADDEVENTLISTENER in doc,\n\t        _top = FALSE,\n\t    \n\t        // isReady: Is the DOM ready to be used? Set to true once it occurs.\n\t        isReady = FALSE,\n\t    \n\t        // Callbacks pending execution until DOM is ready\n\t        callbacks = [];\n\t    \n\t    // Handle when the DOM is ready\n\t    function ready( fn ) {\n\t        if ( !isReady ) {\n\t    \n\t            // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n\t            if ( !doc.body ) {\n\t                return defer( ready );\n\t            }\n\t    \n\t            // Remember that the DOM is ready\n\t            isReady = true;\n\t    \n\t            // Execute all callbacks\n\t            while ( fn = callbacks.shift() ) {\n\t                defer( fn );\n\t            }\n\t        }\n\t    }\n\t    \n\t    // The ready event handler\n\t    function completed( event ) {\n\t        // readyState === \"complete\" is good enough for us to call the dom ready in oldIE\n\t        if ( w3c || event.type === LOAD || doc[READYSTATE] === COMPLETE ) {\n\t            detach();\n\t            ready();\n\t        }\n\t    }\n\t    \n\t    // Clean-up method for dom ready events\n\t    function detach() {\n\t        if ( w3c ) {\n\t            doc[REMOVEEVENTLISTENER]( DOMCONTENTLOADED, completed, FALSE );\n\t            win[REMOVEEVENTLISTENER]( LOAD, completed, FALSE );\n\t        } else {\n\t            doc[DETACHEVENT]( ONREADYSTATECHANGE, completed );\n\t            win[DETACHEVENT]( ONLOAD, completed );\n\t        }\n\t    }\n\t    \n\t    // Defers a function, scheduling it to run after the current call stack has cleared.\n\t    function defer( fn, wait ) {\n\t        // Allow 0 to be passed\n\t        setTimeout( fn, +wait >= 0 ? wait : 1 );\n\t    }\n\t    \n\t    // Attach the listeners:\n\t    \n\t    // Catch cases where onDomReady is called after the browser event has already occurred.\n\t    // we once tried to use readyState \"interactive\" here, but it caused issues like the one\n\t    // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15\n\t    if ( doc[READYSTATE] === COMPLETE ) {\n\t        // Handle it asynchronously to allow scripts the opportunity to delay ready\n\t        defer( ready );\n\t    \n\t    // Standards-based browsers support DOMContentLoaded\n\t    } else if ( w3c ) {\n\t        // Use the handy event callback\n\t        doc[ADDEVENTLISTENER]( DOMCONTENTLOADED, completed, FALSE );\n\t    \n\t        // A fallback to window.onload, that will always work\n\t        win[ADDEVENTLISTENER]( LOAD, completed, FALSE );\n\t    \n\t    // If IE event model is used\n\t    } else {\n\t        // Ensure firing before onload, maybe late but safe also for iframes\n\t        doc[ATTACHEVENT]( ONREADYSTATECHANGE, completed );\n\t    \n\t        // A fallback to window.onload, that will always work\n\t        win[ATTACHEVENT]( ONLOAD, completed );\n\t    \n\t        // If IE and not a frame\n\t        // continually check to see if the document is ready\n\t        try {\n\t            _top = win.frameElement == null && docElem;\n\t        } catch(e) {}\n\t    \n\t        if ( _top && _top.doScroll ) {\n\t            (function doScrollCheck() {\n\t                if ( !isReady ) {\n\t                    try {\n\t                        // Use the trick by Diego Perini\n\t                        // http://javascript.nwbox.com/IEContentLoaded/\n\t                        _top.doScroll(\"left\");\n\t                    } catch(e) {\n\t                        return defer( doScrollCheck, 50 );\n\t                    }\n\t    \n\t                    // detach all dom ready events\n\t                    detach();\n\t    \n\t                    // and execute any waiting functions\n\t                    ready();\n\t                }\n\t            })();\n\t        }\n\t    }\n\t    \n\t    function onDomReady( fn ) {\n\t        // If DOM is ready, execute the function (async), otherwise wait\n\t        isReady ? defer( fn ) : callbacks.push( fn );\n\t    }\n\t    \n\t    // Add version\n\t    onDomReady.version = \"1.4.0\";\n\t    // Add method to check if DOM is ready\n\t    onDomReady.isReady = function(){\n\t        return isReady;\n\t    };\n\n\t    return onDomReady;\n\t}\n\n\tmodule.exports = typeof window !== \"undefined\" && _onDomReady(window);\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t//Modified version of component/querystring\n\t//Changes: updated dependencies, dot notation parsing, JSHint fixes\n\t//Fork at https://github.com/imsky/querystring\n\n\t/**\n\t * Module dependencies.\n\t */\n\n\tvar encode = encodeURIComponent;\n\tvar decode = decodeURIComponent;\n\tvar trim = __webpack_require__(4);\n\tvar type = __webpack_require__(5);\n\n\tvar arrayRegex = /(\\w+)\\[(\\d+)\\]/;\n\tvar objectRegex = /\\w+\\.\\w+/;\n\n\t/**\n\t * Parse the given query `str`.\n\t *\n\t * @param {String} str\n\t * @return {Object}\n\t * @api public\n\t */\n\n\texports.parse = function(str){\n\t  if ('string' !== typeof str) return {};\n\n\t  str = trim(str);\n\t  if ('' === str) return {};\n\t  if ('?' === str.charAt(0)) str = str.slice(1);\n\n\t  var obj = {};\n\t  var pairs = str.split('&');\n\t  for (var i = 0; i < pairs.length; i++) {\n\t    var parts = pairs[i].split('=');\n\t    var key = decode(parts[0]);\n\t    var m, ctx, prop;\n\n\t    if (m = arrayRegex.exec(key)) {\n\t      obj[m[1]] = obj[m[1]] || [];\n\t      obj[m[1]][m[2]] = decode(parts[1]);\n\t      continue;\n\t    }\n\n\t    if (m = objectRegex.test(key)) {\n\t      m = key.split('.');\n\t      ctx = obj;\n\t      \n\t      while (m.length) {\n\t        prop = m.shift();\n\n\t        if (!prop.length) continue;\n\n\t        if (!ctx[prop]) {\n\t          ctx[prop] = {};\n\t        } else if (ctx[prop] && typeof ctx[prop] !== 'object') {\n\t          break;\n\t        }\n\n\t        if (!m.length) {\n\t          ctx[prop] = decode(parts[1]);\n\t        }\n\n\t        ctx = ctx[prop];\n\t      }\n\n\t      continue;\n\t    }\n\n\t    obj[parts[0]] = null == parts[1] ? '' : decode(parts[1]);\n\t  }\n\n\t  return obj;\n\t};\n\n\t/**\n\t * Stringify the given `obj`.\n\t *\n\t * @param {Object} obj\n\t * @return {String}\n\t * @api public\n\t */\n\n\texports.stringify = function(obj){\n\t  if (!obj) return '';\n\t  var pairs = [];\n\n\t  for (var key in obj) {\n\t    var value = obj[key];\n\n\t    if ('array' == type(value)) {\n\t      for (var i = 0; i < value.length; ++i) {\n\t        pairs.push(encode(key + '[' + i + ']') + '=' + encode(value[i]));\n\t      }\n\t      continue;\n\t    }\n\n\t    pairs.push(encode(key) + '=' + encode(obj[key]));\n\t  }\n\n\t  return pairs.join('&');\n\t};\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t\n\texports = module.exports = trim;\n\n\tfunction trim(str){\n\t  return str.replace(/^\\s*|\\s*$/g, '');\n\t}\n\n\texports.left = function(str){\n\t  return str.replace(/^\\s*/, '');\n\t};\n\n\texports.right = function(str){\n\t  return str.replace(/\\s*$/, '');\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t/**\n\t * toString ref.\n\t */\n\n\tvar toString = Object.prototype.toString;\n\n\t/**\n\t * Return the type of `val`.\n\t *\n\t * @param {Mixed} val\n\t * @return {String}\n\t * @api public\n\t */\n\n\tmodule.exports = function(val){\n\t  switch (toString.call(val)) {\n\t    case '[object Date]': return 'date';\n\t    case '[object RegExp]': return 'regexp';\n\t    case '[object Arguments]': return 'arguments';\n\t    case '[object Array]': return 'array';\n\t    case '[object Error]': return 'error';\n\t  }\n\n\t  if (val === null) return 'null';\n\t  if (val === undefined) return 'undefined';\n\t  if (val !== val) return 'nan';\n\t  if (val && val.nodeType === 1) return 'element';\n\n\t  if (isBuffer(val)) return 'buffer';\n\n\t  val = val.valueOf\n\t    ? val.valueOf()\n\t    : Object.prototype.valueOf.apply(val);\n\n\t  return typeof val;\n\t};\n\n\t// code borrowed from https://github.com/feross/is-buffer/blob/master/index.js\n\tfunction isBuffer(obj) {\n\t  return !!(obj != null &&\n\t    (obj._isBuffer || // For Safari 5-7 (missing Object.prototype.constructor)\n\t      (obj.constructor &&\n\t      typeof obj.constructor.isBuffer === 'function' &&\n\t      obj.constructor.isBuffer(obj))\n\t    ))\n\t}\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tvar SceneGraph = function(sceneProperties) {\n\t    var nodeCount = 1;\n\n\t    //todo: move merge to helpers section\n\t    function merge(parent, child) {\n\t        for (var prop in child) {\n\t            parent[prop] = child[prop];\n\t        }\n\t        return parent;\n\t    }\n\n\t    var SceneNode = function(name) {\n\t        nodeCount++;\n\t        this.parent = null;\n\t        this.children = {};\n\t        this.id = nodeCount;\n\t        this.name = 'n' + nodeCount;\n\t        if (typeof name !== 'undefined') {\n\t            this.name = name;\n\t        }\n\t        this.x = this.y = this.z = 0;\n\t        this.width = this.height = 0;\n\t    };\n\n\t    SceneNode.prototype.resize = function(width, height) {\n\t        if (width != null) {\n\t            this.width = width;\n\t        }\n\t        if (height != null) {\n\t            this.height = height;\n\t        }\n\t    };\n\n\t    SceneNode.prototype.moveTo = function(x, y, z) {\n\t        this.x = x != null ? x : this.x;\n\t        this.y = y != null ? y : this.y;\n\t        this.z = z != null ? z : this.z;\n\t    };\n\n\t    SceneNode.prototype.add = function(child) {\n\t        var name = child.name;\n\t        if (typeof this.children[name] === 'undefined') {\n\t            this.children[name] = child;\n\t            child.parent = this;\n\t        } else {\n\t            throw 'SceneGraph: child already exists: ' + name;\n\t        }\n\t    };\n\n\t    var RootNode = function() {\n\t        SceneNode.call(this, 'root');\n\t        this.properties = sceneProperties;\n\t    };\n\n\t    RootNode.prototype = new SceneNode();\n\n\t    var Shape = function(name, props) {\n\t        SceneNode.call(this, name);\n\t        this.properties = {\n\t            'fill': '#000000'\n\t        };\n\t        if (typeof props !== 'undefined') {\n\t            merge(this.properties, props);\n\t        } else if (typeof name !== 'undefined' && typeof name !== 'string') {\n\t            throw 'SceneGraph: invalid node name';\n\t        }\n\t    };\n\n\t    Shape.prototype = new SceneNode();\n\n\t    var Group = function() {\n\t        Shape.apply(this, arguments);\n\t        this.type = 'group';\n\t    };\n\n\t    Group.prototype = new Shape();\n\n\t    var Rect = function() {\n\t        Shape.apply(this, arguments);\n\t        this.type = 'rect';\n\t    };\n\n\t    Rect.prototype = new Shape();\n\n\t    var Text = function(text) {\n\t        Shape.call(this);\n\t        this.type = 'text';\n\t        this.properties.text = text;\n\t    };\n\n\t    Text.prototype = new Shape();\n\n\t    var root = new RootNode();\n\n\t    this.Shape = {\n\t        'Rect': Rect,\n\t        'Text': Text,\n\t        'Group': Group\n\t    };\n\n\t    this.root = root;\n\t    return this;\n\t};\n\n\tmodule.exports = SceneGraph;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/**\n\t * Shallow object clone and merge\n\t *\n\t * @param a Object A\n\t * @param b Object B\n\t * @returns {Object} New object with all of A's properties, and all of B's properties, overwriting A's properties\n\t */\n\texports.extend = function(a, b) {\n\t    var c = {};\n\t    for (var x in a) {\n\t        if (a.hasOwnProperty(x)) {\n\t            c[x] = a[x];\n\t        }\n\t    }\n\t    if (b != null) {\n\t        for (var y in b) {\n\t            if (b.hasOwnProperty(y)) {\n\t                c[y] = b[y];\n\t            }\n\t        }\n\t    }\n\t    return c;\n\t};\n\n\t/**\n\t * Takes a k/v list of CSS properties and returns a rule\n\t *\n\t * @param props CSS properties object\n\t */\n\texports.cssProps = function(props) {\n\t    var ret = [];\n\t    for (var p in props) {\n\t        if (props.hasOwnProperty(p)) {\n\t            ret.push(p + ':' + props[p]);\n\t        }\n\t    }\n\t    return ret.join(';');\n\t};\n\n\t/**\n\t * Encodes HTML entities in a string\n\t *\n\t * @param str Input string\n\t */\n\texports.encodeHtmlEntity = function(str) {\n\t    var buf = [];\n\t    var charCode = 0;\n\t    for (var i = str.length - 1; i >= 0; i--) {\n\t        charCode = str.charCodeAt(i);\n\t        if (charCode > 128) {\n\t            buf.unshift(['&#', charCode, ';'].join(''));\n\t        } else {\n\t            buf.unshift(str[i]);\n\t        }\n\t    }\n\t    return buf.join('');\n\t};\n\n\t/**\n\t * Checks if an image exists\n\t *\n\t * @param src URL of image\n\t * @param callback Callback to call once image status has been found\n\t */\n\texports.imageExists = function(src, callback) {\n\t    var image = new Image();\n\t    image.onerror = function() {\n\t        callback.call(this, false);\n\t    };\n\t    image.onload = function() {\n\t        callback.call(this, true);\n\t    };\n\t    image.src = src;\n\t};\n\n\t/**\n\t * Decodes HTML entities in a string\n\t *\n\t * @param str Input string\n\t */\n\texports.decodeHtmlEntity = function(str) {\n\t    return str.replace(/&#(\\d+);/g, function(match, dec) {\n\t        return String.fromCharCode(dec);\n\t    });\n\t};\n\n\n\t/**\n\t * Returns an element's dimensions if it's visible, `false` otherwise.\n\t *\n\t * @param el DOM element\n\t */\n\texports.dimensionCheck = function(el) {\n\t    var dimensions = {\n\t        height: el.clientHeight,\n\t        width: el.clientWidth\n\t    };\n\n\t    if (dimensions.height && dimensions.width) {\n\t        return dimensions;\n\t    } else {\n\t        return false;\n\t    }\n\t};\n\n\n\t/**\n\t * Returns true if value is truthy or if it is \"semantically truthy\"\n\t * @param val\n\t */\n\texports.truthy = function(val) {\n\t    if (typeof val === 'string') {\n\t        return val === 'true' || val === 'yes' || val === '1' || val === 'on' || val === 'â';\n\t    }\n\t    return !!val;\n\t};\n\n\t/**\n\t * Parses input into a well-formed CSS color\n\t * @param val\n\t */\n\texports.parseColor = function(val) {\n\t    var hexre = /(^(?:#?)[0-9a-f]{6}$)|(^(?:#?)[0-9a-f]{3}$)/i;\n\t    var rgbre = /^rgb\\((\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$/;\n\t    var rgbare = /^rgba\\((\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(0\\.\\d{1,}|1)\\)$/;\n\n\t    var match = val.match(hexre);\n\t    var retval;\n\n\t    if (match !== null) {\n\t        retval = match[1] || match[2];\n\t        if (retval[0] !== '#') {\n\t            return '#' + retval;\n\t        } else {\n\t            return retval;\n\t        }\n\t    }\n\n\t    match = val.match(rgbre);\n\n\t    if (match !== null) {\n\t        retval = 'rgb(' + match.slice(1).join(',') + ')';\n\t        return retval;\n\t    }\n\n\t    match = val.match(rgbare);\n\n\t    if (match !== null) {\n\t        retval = 'rgba(' + match.slice(1).join(',') + ')';\n\t        return retval;\n\t    }\n\n\t    return null;\n\t};\n\n\t/**\n\t * Provides the correct scaling ratio for canvas drawing operations on HiDPI screens (e.g. Retina displays)\n\t */\n\texports.canvasRatio = function () {\n\t    var devicePixelRatio = 1;\n\t    var backingStoreRatio = 1;\n\n\t    if (global.document) {\n\t        var canvas = global.document.createElement('canvas');\n\t        if (canvas.getContext) {\n\t            var ctx = canvas.getContext('2d');\n\t            devicePixelRatio = global.devicePixelRatio || 1;\n\t            backingStoreRatio = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;\n\t        }\n\t    }\n\n\t    return devicePixelRatio / backingStoreRatio;\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {var DOM = __webpack_require__(9);\n\n\tvar SVG_NS = 'http://www.w3.org/2000/svg';\n\tvar NODE_TYPE_COMMENT = 8;\n\n\t/**\n\t * Generic SVG element creation function\n\t *\n\t * @param svg SVG context, set to null if new\n\t * @param width Document width\n\t * @param height Document height\n\t */\n\texports.initSVG = function(svg, width, height) {\n\t    var defs, style, initialize = false;\n\n\t    if (svg && svg.querySelector) {\n\t        style = svg.querySelector('style');\n\t        if (style === null) {\n\t            initialize = true;\n\t        }\n\t    } else {\n\t        svg = DOM.newEl('svg', SVG_NS);\n\t        initialize = true;\n\t    }\n\n\t    if (initialize) {\n\t        defs = DOM.newEl('defs', SVG_NS);\n\t        style = DOM.newEl('style', SVG_NS);\n\t        DOM.setAttr(style, {\n\t            'type': 'text/css'\n\t        });\n\t        defs.appendChild(style);\n\t        svg.appendChild(defs);\n\t    }\n\n\t    //IE throws an exception if this is set and Chrome requires it to be set\n\t    if (svg.webkitMatchesSelector) {\n\t        svg.setAttribute('xmlns', SVG_NS);\n\t    }\n\n\t    //Remove comment nodes\n\t    for (var i = 0; i < svg.childNodes.length; i++) {\n\t        if (svg.childNodes[i].nodeType === NODE_TYPE_COMMENT) {\n\t            svg.removeChild(svg.childNodes[i]);\n\t        }\n\t    }\n\n\t    //Remove CSS\n\t    while (style.childNodes.length) {\n\t        style.removeChild(style.childNodes[0]);\n\t    }\n\n\t    DOM.setAttr(svg, {\n\t        'width': width,\n\t        'height': height,\n\t        'viewBox': '0 0 ' + width + ' ' + height,\n\t        'preserveAspectRatio': 'none'\n\t    });\n\n\t    return svg;\n\t};\n\n\t/**\n\t * Converts serialized SVG to a string suitable for data URI use\n\t * @param svgString Serialized SVG string\n\t * @param [base64] Use base64 encoding for data URI\n\t */\n\texports.svgStringToDataURI = function() {\n\t    var rawPrefix = 'data:image/svg+xml;charset=UTF-8,';\n\t    var base64Prefix = 'data:image/svg+xml;charset=UTF-8;base64,';\n\n\t    return function(svgString, base64) {\n\t        if (base64) {\n\t            return base64Prefix + btoa(global.unescape(encodeURIComponent(svgString)));\n\t        } else {\n\t            return rawPrefix + encodeURIComponent(svgString);\n\t        }\n\t    };\n\t}();\n\n\t/**\n\t * Returns serialized SVG with XML processing instructions\n\t *\n\t * @param svg SVG context\n\t * @param stylesheets CSS stylesheets to include\n\t */\n\texports.serializeSVG = function(svg, engineSettings) {\n\t    if (!global.XMLSerializer) return;\n\t    var serializer = new XMLSerializer();\n\t    var svgCSS = '';\n\t    var stylesheets = engineSettings.stylesheets;\n\n\t    //External stylesheets: Processing Instruction method\n\t    if (engineSettings.svgXMLStylesheet) {\n\t        var xml = DOM.createXML();\n\t        //Add <?xml-stylesheet ?> directives\n\t        for (var i = stylesheets.length - 1; i >= 0; i--) {\n\t            var csspi = xml.createProcessingInstruction('xml-stylesheet', 'href=\"' + stylesheets[i] + '\" rel=\"stylesheet\"');\n\t            xml.insertBefore(csspi, xml.firstChild);\n\t        }\n\n\t        xml.removeChild(xml.documentElement);\n\t        svgCSS = serializer.serializeToString(xml);\n\t    }\n\n\t    var svgText = serializer.serializeToString(svg);\n\t    svgText = svgText.replace(/\\&amp;(\\#[0-9]{2,}\\;)/g, '&$1');\n\t    return svgCSS + svgText;\n\t};\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/**\n\t * Generic new DOM element function\n\t *\n\t * @param tag Tag to create\n\t * @param namespace Optional namespace value\n\t */\n\texports.newEl = function(tag, namespace) {\n\t    if (!global.document) return;\n\n\t    if (namespace == null) {\n\t        return global.document.createElement(tag);\n\t    } else {\n\t        return global.document.createElementNS(namespace, tag);\n\t    }\n\t};\n\n\t/**\n\t * Generic setAttribute function\n\t *\n\t * @param el Reference to DOM element\n\t * @param attrs Object with attribute keys and values\n\t */\n\texports.setAttr = function (el, attrs) {\n\t    for (var a in attrs) {\n\t        el.setAttribute(a, attrs[a]);\n\t    }\n\t};\n\n\t/**\n\t * Creates a XML document\n\t * @private\n\t */\n\texports.createXML = function() {\n\t    if (!global.DOMParser) return;\n\t    return new DOMParser().parseFromString('<xml />', 'application/xml');\n\t};\n\n\t/**\n\t * Converts a value into an array of DOM nodes\n\t *\n\t * @param val A string, a NodeList, a Node, or an HTMLCollection\n\t */\n\texports.getNodeArray = function(val) {\n\t    var retval = null;\n\t    if (typeof(val) == 'string') {\n\t        retval = document.querySelectorAll(val);\n\t    } else if (global.NodeList && val instanceof global.NodeList) {\n\t        retval = val;\n\t    } else if (global.Node && val instanceof global.Node) {\n\t        retval = [val];\n\t    } else if (global.HTMLCollection && val instanceof global.HTMLCollection) {\n\t        retval = val;\n\t    } else if (val instanceof Array) {\n\t        retval = val;\n\t    } else if (val === null) {\n\t        retval = [];\n\t    }\n\n\t    retval = Array.prototype.slice.call(retval);\n\n\t    return retval;\n\t};\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\tvar Color = function(color, options) {\n\t    //todo: support rgba, hsla, and rrggbbaa notation\n\t    //todo: use CIELAB internally\n\t    //todo: add clamp function (with sign)\n\t    if (typeof color !== 'string') return;\n\n\t    this.original = color;\n\n\t    if (color.charAt(0) === '#') {\n\t        color = color.slice(1);\n\t    }\n\n\t    if (/[^a-f0-9]+/i.test(color)) return;\n\n\t    if (color.length === 3) {\n\t        color = color.replace(/./g, '$&$&');\n\t    }\n\n\t    if (color.length !== 6) return;\n\n\t    this.alpha = 1;\n\n\t    if (options && options.alpha) {\n\t        this.alpha = options.alpha;\n\t    }\n\n\t    this.set(parseInt(color, 16));\n\t};\n\n\t//todo: jsdocs\n\tColor.rgb2hex = function(r, g, b) {\n\t    function format (decimal) {\n\t        var hex = (decimal | 0).toString(16);\n\t        if (decimal < 16) {\n\t            hex = '0' + hex;\n\t        }\n\t        return hex;\n\t    }\n\n\t    return [r, g, b].map(format).join('');\n\t};\n\n\t//todo: jsdocs\n\tColor.hsl2rgb = function (h, s, l) {\n\t    var H = h / 60;\n\t    var C = (1 - Math.abs(2 * l - 1)) * s;\n\t    var X = C * (1 - Math.abs(parseInt(H) % 2 - 1));\n\t    var m = l - (C / 2);\n\n\t    var r = 0, g = 0, b = 0;\n\n\t    if (H >= 0 && H < 1) {\n\t        r = C;\n\t        g = X;\n\t    } else if (H >= 1 && H < 2) {\n\t        r = X;\n\t        g = C;\n\t    } else if (H >= 2 && H < 3) {\n\t        g = C;\n\t        b = X;\n\t    } else if (H >= 3 && H < 4) {\n\t        g = X;\n\t        b = C;\n\t    } else if (H >= 4 && H < 5) {\n\t        r = X;\n\t        b = C;\n\t    } else if (H >= 5 && H < 6) {\n\t        r = C;\n\t        b = X;\n\t    }\n\n\t    r += m;\n\t    g += m;\n\t    b += m;\n\n\t    r = parseInt(r * 255);\n\t    g = parseInt(g * 255);\n\t    b = parseInt(b * 255);\n\n\t    return [r, g, b];\n\t};\n\n\t/**\n\t * Sets the color from a raw RGB888 integer\n\t * @param raw RGB888 representation of color\n\t */\n\t//todo: refactor into a static method\n\t//todo: factor out individual color spaces\n\t//todo: add HSL, CIELAB, and CIELUV\n\tColor.prototype.set = function (val) {\n\t    this.raw = val;\n\n\t    var r = (this.raw & 0xFF0000) >> 16;\n\t    var g = (this.raw & 0x00FF00) >> 8;\n\t    var b = (this.raw & 0x0000FF);\n\n\t    // BT.709\n\t    var y = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n\t    var u = -0.09991 * r - 0.33609 * g + 0.436 * b;\n\t    var v = 0.615 * r - 0.55861 * g - 0.05639 * b;\n\n\t    this.rgb = {\n\t        r: r,\n\t        g: g,\n\t        b: b\n\t    };\n\n\t    this.yuv = {\n\t        y: y,\n\t        u: u,\n\t        v: v\n\t    };\n\n\t    return this;\n\t};\n\n\t/**\n\t * Lighten or darken a color\n\t * @param multiplier Amount to lighten or darken (-1 to 1)\n\t */\n\tColor.prototype.lighten = function(multiplier) {\n\t    var cm = Math.min(1, Math.max(0, Math.abs(multiplier))) * (multiplier < 0 ? -1 : 1);\n\t    var bm = (255 * cm) | 0;\n\t    var cr = Math.min(255, Math.max(0, this.rgb.r + bm));\n\t    var cg = Math.min(255, Math.max(0, this.rgb.g + bm));\n\t    var cb = Math.min(255, Math.max(0, this.rgb.b + bm));\n\t    var hex = Color.rgb2hex(cr, cg, cb);\n\t    return new Color(hex);\n\t};\n\n\t/**\n\t * Output color in hex format\n\t * @param addHash Add a hash character to the beginning of the output\n\t */\n\tColor.prototype.toHex = function(addHash) {\n\t    return (addHash ? '#' : '') + this.raw.toString(16);\n\t};\n\n\t/**\n\t * Returns whether or not current color is lighter than another color\n\t * @param color Color to compare against\n\t */\n\tColor.prototype.lighterThan = function(color) {\n\t    if (!(color instanceof Color)) {\n\t        color = new Color(color);\n\t    }\n\n\t    return this.yuv.y > color.yuv.y;\n\t};\n\n\t/**\n\t * Returns the result of mixing current color with another color\n\t * @param color Color to mix with\n\t * @param multiplier How much to mix with the other color\n\t */\n\t/*\n\tColor.prototype.mix = function (color, multiplier) {\n\t    if (!(color instanceof Color)) {\n\t        color = new Color(color);\n\t    }\n\n\t    var r = this.rgb.r;\n\t    var g = this.rgb.g;\n\t    var b = this.rgb.b;\n\t    var a = this.alpha;\n\n\t    var m = typeof multiplier !== 'undefined' ? multiplier : 0.5;\n\n\t    //todo: write a lerp function\n\t    r = r + m * (color.rgb.r - r);\n\t    g = g + m * (color.rgb.g - g);\n\t    b = b + m * (color.rgb.b - b);\n\t    a = a + m * (color.alpha - a);\n\n\t    return new Color(Color.rgbToHex(r, g, b), {\n\t        'alpha': a\n\t    });\n\t};\n\t*/\n\n\t/**\n\t * Returns the result of blending another color on top of current color with alpha\n\t * @param color Color to blend on top of current color, i.e. \"Ca\"\n\t */\n\t//todo: see if .blendAlpha can be merged into .mix\n\tColor.prototype.blendAlpha = function(color) {\n\t    if (!(color instanceof Color)) {\n\t        color = new Color(color);\n\t    }\n\n\t    var Ca = color;\n\t    var Cb = this;\n\n\t    //todo: write alpha blending function\n\t    var r = Ca.alpha * Ca.rgb.r + (1 - Ca.alpha) * Cb.rgb.r;\n\t    var g = Ca.alpha * Ca.rgb.g + (1 - Ca.alpha) * Cb.rgb.g;\n\t    var b = Ca.alpha * Ca.rgb.b + (1 - Ca.alpha) * Cb.rgb.b;\n\n\t    return new Color(Color.rgb2hex(r, g, b));\n\t};\n\n\tmodule.exports = Color;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t  'version': '2.9.4',\n\t  'svg_ns': 'http://www.w3.org/2000/svg'\n\t};\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar shaven = __webpack_require__(13);\n\n\tvar SVG = __webpack_require__(8);\n\tvar constants = __webpack_require__(11);\n\tvar utils = __webpack_require__(7);\n\n\tvar SVG_NS = constants.svg_ns;\n\n\tvar templates = {\n\t  'element': function (options) {\n\t    var tag = options.tag;\n\t    var content = options.content || '';\n\t    delete options.tag;\n\t    delete options.content;\n\t    return  [tag, content, options];\n\t  }\n\t};\n\n\t//todo: deprecate tag arg, infer tag from shape object\n\tfunction convertShape (shape, tag) {\n\t  return templates.element({\n\t    'tag': tag,\n\t    'width': shape.width,\n\t    'height': shape.height,\n\t    'fill': shape.properties.fill\n\t  });\n\t}\n\n\tfunction textCss (properties) {\n\t  return utils.cssProps({\n\t    'fill': properties.fill,\n\t    'font-weight': properties.font.weight,\n\t    'font-family': properties.font.family + ', monospace',\n\t    'font-size': properties.font.size + properties.font.units\n\t  });\n\t}\n\n\tfunction outlinePath (bgWidth, bgHeight, outlineWidth) {\n\t  var outlineOffsetWidth = outlineWidth / 2;\n\n\t  return [\n\t    'M', outlineOffsetWidth, outlineOffsetWidth,\n\t    'H', bgWidth - outlineOffsetWidth,\n\t    'V', bgHeight - outlineOffsetWidth,\n\t    'H', outlineOffsetWidth,\n\t    'V', 0,\n\t    'M', 0, outlineOffsetWidth,\n\t    'L', bgWidth, bgHeight - outlineOffsetWidth,\n\t    'M', 0, bgHeight - outlineOffsetWidth,\n\t    'L', bgWidth, outlineOffsetWidth\n\t  ].join(' ');\n\t}\n\n\tmodule.exports = function (sceneGraph, renderSettings) {\n\t  var engineSettings = renderSettings.engineSettings;\n\t  var stylesheets = engineSettings.stylesheets;\n\t  var stylesheetXml = stylesheets.map(function (stylesheet) {\n\t    return '<?xml-stylesheet rel=\"stylesheet\" href=\"' + stylesheet + '\"?>';\n\t  }).join('\\n');\n\n\t  var holderId = 'holder_' + Number(new Date()).toString(16);\n\n\t  var root = sceneGraph.root;\n\t  var textGroup = root.children.holderTextGroup;\n\n\t  var css = '#' + holderId + ' text { ' + textCss(textGroup.properties) + ' } ';\n\n\t  // push text down to be equally vertically aligned with canvas renderer\n\t  textGroup.y += textGroup.textPositionData.boundingBox.height * 0.8;\n\n\t  var wordTags = [];\n\n\t  Object.keys(textGroup.children).forEach(function (lineKey) {\n\t    var line = textGroup.children[lineKey];\n\n\t    Object.keys(line.children).forEach(function (wordKey) {\n\t      var word = line.children[wordKey];\n\t      var x = textGroup.x + line.x + word.x;\n\t      var y = textGroup.y + line.y + word.y;\n\n\t      var wordTag = templates.element({\n\t        'tag': 'text',\n\t        'content': word.properties.text,\n\t        'x': x,\n\t        'y': y\n\t      });\n\n\t      wordTags.push(wordTag);\n\t    });\n\t  });\n\n\t  var text = templates.element({\n\t    'tag': 'g',\n\t    'content': wordTags\n\t  });\n\n\t  var outline = null;\n\n\t  if (root.children.holderBg.properties.outline) {\n\t    var outlineProperties = root.children.holderBg.properties.outline;\n\t    outline = templates.element({\n\t      'tag': 'path',\n\t      'd': outlinePath(root.children.holderBg.width, root.children.holderBg.height, outlineProperties.width),\n\t      'stroke-width': outlineProperties.width,\n\t      'stroke': outlineProperties.fill,\n\t      'fill': 'none'\n\t    });\n\t  }\n\n\t  var bg = convertShape(root.children.holderBg, 'rect');\n\n\t  var sceneContent = [];\n\n\t  sceneContent.push(bg);\n\t  if (outlineProperties) {\n\t    sceneContent.push(outline);\n\t  }\n\t  sceneContent.push(text);\n\n\t  var scene = templates.element({\n\t    'tag': 'g',\n\t    'id': holderId,\n\t    'content': sceneContent\n\t  });\n\n\t  var style = templates.element({\n\t    'tag': 'style',\n\t    //todo: figure out how to add CDATA directive\n\t    'content': css,\n\t    'type': 'text/css'\n\t  });\n\n\t  var defs = templates.element({\n\t    'tag': 'defs',\n\t    'content': style\n\t  });\n\n\t  var svg = templates.element({\n\t    'tag': 'svg',\n\t    'content': [defs, scene],\n\t    'width': root.properties.width,\n\t    'height': root.properties.height,\n\t    'xmlns': SVG_NS,\n\t    'viewBox': [0, 0, root.properties.width, root.properties.height].join(' '),\n\t    'preserveAspectRatio': 'none'\n\t  });\n\n\t  var output = shaven(svg);\n\t  \n\t  output = stylesheetXml + output[0];\n\n\t  var svgString = SVG.svgStringToDataURI(output, renderSettings.mode === 'background');\n\t  return svgString;\n\t};\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar escape = __webpack_require__(14)\n\n\t// TODO: remove namespace\n\n\tmodule.exports = function shaven (array, namespace, returnObject) {\n\n\t\t'use strict'\n\n\t\tvar i = 1\n\t\tvar doesEscape = true\n\t\tvar HTMLString\n\t\tvar attributeKey\n\t\tvar callback\n\t\tvar key\n\n\n\t\treturnObject = returnObject || {}\n\n\n\t\tfunction createElement (sugarString) {\n\n\t\t\tvar tags = sugarString.match(/^[\\w-]+/)\n\t\t\tvar element = {\n\t\t\t\ttag: tags ? tags[0] : 'div',\n\t\t\t\tattr: {},\n\t\t\t\tchildren: []\n\t\t\t}\n\t\t\tvar id = sugarString.match(/#([\\w-]+)/)\n\t\t\tvar reference = sugarString.match(/\\$([\\w-]+)/)\n\t\t\tvar classNames = sugarString.match(/\\.[\\w-]+/g)\n\n\n\t\t\t// Assign id if is set\n\t\t\tif (id) {\n\t\t\t\telement.attr.id = id[1]\n\n\t\t\t\t// Add element to the return object\n\t\t\t\treturnObject[id[1]] = element\n\t\t\t}\n\n\t\t\tif (reference)\n\t\t\t\treturnObject[reference[1]] = element\n\n\t\t\tif (classNames)\n\t\t\t\telement.attr.class = classNames.join(' ').replace(/\\./g, '')\n\n\t\t\tif (sugarString.match(/&$/g))\n\t\t\t\tdoesEscape = false\n\n\t\t\treturn element\n\t\t}\n\n\t\tfunction replacer (key, value) {\n\n\t\t\tif (value === null || value === false || value === undefined)\n\t\t\t\treturn\n\n\t\t\tif (typeof value !== 'string' && typeof value !== 'object')\n\t\t\t\treturn String(value)\n\n\t\t\treturn value\n\t\t}\n\n\t\tfunction escapeAttribute (string) {\n\t\t\treturn (string || string === 0) ?\n\t\t\t\tString(string)\n\t\t\t\t\t.replace(/&/g, '&amp;')\n\t\t\t\t\t.replace(/\"/g, '&quot;') :\n\t\t\t\t''\n\t\t}\n\n\t\tfunction escapeHTML (string) {\n\t\t\treturn String(string)\n\t\t\t\t.replace(/&/g, '&amp;')\n\t\t\t\t.replace(/\"/g, '&quot;')\n\t\t\t\t.replace(/'/g, '&apos;')\n\t\t\t\t.replace(/</g, '&lt;')\n\t\t\t\t.replace(/>/g, '&gt;')\n\t\t}\n\n\n\t\tif (typeof array[0] === 'string')\n\t\t\tarray[0] = createElement(array[0])\n\n\t\telse if (Array.isArray(array[0]))\n\t\t\ti = 0\n\n\t\telse\n\t\t\tthrow new Error(\n\t\t\t\t'First element of array must be a string, ' +\n\t\t\t\t'or an array and not ' + JSON.stringify(array[0])\n\t\t\t)\n\n\n\t\tfor (; i < array.length; i++) {\n\n\t\t\t// Don't render element if value is false or null\n\t\t\tif (array[i] === false || array[i] === null) {\n\t\t\t\tarray[0] = false\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\t// Continue with next array value if current value is undefined or true\n\t\t\telse if (array[i] === undefined || array[i] === true) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\telse if (typeof array[i] === 'string') {\n\t\t\t\tif (doesEscape)\n\t\t\t\t\tarray[i] = escapeHTML(array[i])\n\n\t\t\t\tarray[0].children.push(array[i])\n\t\t\t}\n\n\t\t\telse if (typeof array[i] === 'number') {\n\n\t\t\t\tarray[0].children.push(array[i])\n\t\t\t}\n\n\t\t\telse if (Array.isArray(array[i])) {\n\n\t\t\t\tif (Array.isArray(array[i][0])) {\n\t\t\t\t\tarray[i].reverse().forEach(function (subArray) {\n\t\t\t\t\t\tarray.splice(i + 1, 0, subArray)\n\t\t\t\t\t})\n\n\t\t\t\t\tif (i !== 0)\n\t\t\t\t\t\tcontinue\n\t\t\t\t\ti++\n\t\t\t\t}\n\n\t\t\t\tshaven(array[i], namespace, returnObject)\n\n\t\t\t\tif (array[i][0])\n\t\t\t\t\tarray[0].children.push(array[i][0])\n\t\t\t}\n\n\t\t\telse if (typeof array[i] === 'function')\n\t\t\t\tcallback = array[i]\n\n\n\t\t\telse if (typeof array[i] === 'object') {\n\t\t\t\tfor (attributeKey in array[i])\n\t\t\t\t\tif (array[i].hasOwnProperty(attributeKey))\n\t\t\t\t\t\tif (array[i][attributeKey] !== null &&\n\t\t\t\t\t\t\tarray[i][attributeKey] !== false)\n\t\t\t\t\t\t\tif (attributeKey === 'style' &&\n\t\t\t\t\t\t\t\ttypeof array[i][attributeKey] === 'object')\n\t\t\t\t\t\t\t\tarray[0].attr[attributeKey] = JSON\n\t\t\t\t\t\t\t\t\t.stringify(array[i][attributeKey], replacer)\n\t\t\t\t\t\t\t\t\t.slice(2, -2)\n\t\t\t\t\t\t\t\t\t.replace(/\",\"/g, ';')\n\t\t\t\t\t\t\t\t\t.replace(/\":\"/g, ':')\n\t\t\t\t\t\t\t\t\t.replace(/\\\\\"/g, '\\'')\n\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tarray[0].attr[attributeKey] = array[i][attributeKey]\n\t\t\t}\n\n\t\t\telse\n\t\t\t\tthrow new TypeError('\"' + array[i] + '\" is not allowed as a value.')\n\t\t}\n\n\n\t\tif (array[0] !== false) {\n\n\t\t\tHTMLString = '<' + array[0].tag\n\n\t\t\tfor (key in array[0].attr)\n\t\t\t\tif (array[0].attr.hasOwnProperty(key))\n\t\t\t\t\tHTMLString += ' ' + key + '=\"' +\n\t\t\t\t\t\tescapeAttribute(array[0].attr[key]) + '\"'\n\n\t\t\tHTMLString += '>'\n\n\t\t\tarray[0].children.forEach(function (child) {\n\t\t\t\tHTMLString += child\n\t\t\t})\n\n\t\t\tHTMLString += '</' + array[0].tag + '>'\n\n\t\t\tarray[0] = HTMLString\n\t\t}\n\n\t\t// Return root element on index 0\n\t\treturnObject[0] = array[0]\n\n\t\tif (callback)\n\t\t\tcallback(array[0])\n\n\t\t// returns object containing all elements with an id and the root element\n\t\treturn returnObject\n\t}\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * escape-html\n\t * Copyright(c) 2012-2013 TJ Holowaychuk\n\t * Copyright(c) 2015 Andreas Lubbe\n\t * Copyright(c) 2015 Tiancheng \"Timothy\" Gu\n\t * MIT Licensed\n\t */\n\n\t'use strict';\n\n\t/**\n\t * Module variables.\n\t * @private\n\t */\n\n\tvar matchHtmlRegExp = /[\"'&<>]/;\n\n\t/**\n\t * Module exports.\n\t * @public\n\t */\n\n\tmodule.exports = escapeHtml;\n\n\t/**\n\t * Escape special characters in the given string of html.\n\t *\n\t * @param  {string} string The string to escape for inserting into HTML\n\t * @return {string}\n\t * @public\n\t */\n\n\tfunction escapeHtml(string) {\n\t  var str = '' + string;\n\t  var match = matchHtmlRegExp.exec(str);\n\n\t  if (!match) {\n\t    return str;\n\t  }\n\n\t  var escape;\n\t  var html = '';\n\t  var index = 0;\n\t  var lastIndex = 0;\n\n\t  for (index = match.index; index < str.length; index++) {\n\t    switch (str.charCodeAt(index)) {\n\t      case 34: // \"\n\t        escape = '&quot;';\n\t        break;\n\t      case 38: // &\n\t        escape = '&amp;';\n\t        break;\n\t      case 39: // '\n\t        escape = '&#39;';\n\t        break;\n\t      case 60: // <\n\t        escape = '&lt;';\n\t        break;\n\t      case 62: // >\n\t        escape = '&gt;';\n\t        break;\n\t      default:\n\t        continue;\n\t    }\n\n\t    if (lastIndex !== index) {\n\t      html += str.substring(lastIndex, index);\n\t    }\n\n\t    lastIndex = index + 1;\n\t    html += escape;\n\t  }\n\n\t  return lastIndex !== index\n\t    ? html + str.substring(lastIndex, index)\n\t    : html;\n\t}\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar DOM = __webpack_require__(9);\n\tvar utils = __webpack_require__(7);\n\n\tmodule.exports = (function() {\n\t    var canvas = DOM.newEl('canvas');\n\t    var ctx = null;\n\n\t    return function(sceneGraph) {\n\t        if (ctx == null) {\n\t            ctx = canvas.getContext('2d');\n\t        }\n\n\t        var dpr = utils.canvasRatio();\n\t        var root = sceneGraph.root;\n\t        canvas.width = dpr * root.properties.width;\n\t        canvas.height = dpr * root.properties.height ;\n\t        ctx.textBaseline = 'middle';\n\n\t        var bg = root.children.holderBg;\n\t        var bgWidth = dpr * bg.width;\n\t        var bgHeight = dpr * bg.height;\n\t        //todo: parametrize outline width (e.g. in scene object)\n\t        var outlineWidth = 2;\n\t        var outlineOffsetWidth = outlineWidth / 2;\n\n\t        ctx.fillStyle = bg.properties.fill;\n\t        ctx.fillRect(0, 0, bgWidth, bgHeight);\n\n\t        if (bg.properties.outline) {\n\t            //todo: abstract this into a method\n\t            ctx.strokeStyle = bg.properties.outline.fill;\n\t            ctx.lineWidth = bg.properties.outline.width;\n\t            ctx.moveTo(outlineOffsetWidth, outlineOffsetWidth);\n\t            // TL, TR, BR, BL\n\t            ctx.lineTo(bgWidth - outlineOffsetWidth, outlineOffsetWidth);\n\t            ctx.lineTo(bgWidth - outlineOffsetWidth, bgHeight - outlineOffsetWidth);\n\t            ctx.lineTo(outlineOffsetWidth, bgHeight - outlineOffsetWidth);\n\t            ctx.lineTo(outlineOffsetWidth, outlineOffsetWidth);\n\t            // Diagonals\n\t            ctx.moveTo(0, outlineOffsetWidth);\n\t            ctx.lineTo(bgWidth, bgHeight - outlineOffsetWidth);\n\t            ctx.moveTo(0, bgHeight - outlineOffsetWidth);\n\t            ctx.lineTo(bgWidth, outlineOffsetWidth);\n\t            ctx.stroke();\n\t        }\n\n\t        var textGroup = root.children.holderTextGroup;\n\t        ctx.font = textGroup.properties.font.weight + ' ' + (dpr * textGroup.properties.font.size) + textGroup.properties.font.units + ' ' + textGroup.properties.font.family + ', monospace';\n\t        ctx.fillStyle = textGroup.properties.fill;\n\n\t        for (var lineKey in textGroup.children) {\n\t            var line = textGroup.children[lineKey];\n\t            for (var wordKey in line.children) {\n\t                var word = line.children[wordKey];\n\t                var x = dpr * (textGroup.x + line.x + word.x);\n\t                var y = dpr * (textGroup.y + line.y + word.y + (textGroup.properties.leading / 2));\n\n\t                ctx.fillText(word.properties.text, x, y);\n\t            }\n\t        }\n\n\t        return canvas.toDataURL('image/png');\n\t    };\n\t})();\n\n/***/ }\n/******/ ])\n});\n;\n(function(ctx, isMeteorPackage) {\n    if (isMeteorPackage) {\n        Holder = ctx.Holder;\n    }\n})(this, typeof Meteor !== 'undefined' && typeof Package !== 'undefined');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n//=========================\n// BUTTON HANDLERS\n//=========================\n$(document).ready(function () {\n\n    $('.books__status-wrapper').on('click', function (e) {\n        e.stopPropagation();\n        var $this = this;\n        // console.log($this)\n        $($this).children('.books__status-options').addClass('books__status-options--active');\n    });\n\n    $('.books__status-options').on('click', function (tEvent) {\n        tEvent.stopPropagation();\n\n        var $this = this;\n        // console.log($this)\n        //get status that was passed on the button clicked\n        var tempStatus = tEvent.target.dataset.status;\n\n        console.log(tempStatus);\n        //define book(from the parent) and add status\n        var bookData = $($this).closest('.main__books-wrapper')[0].dataset.book;\n        var tempBook = JSON.parse(bookData);\n        addBookToUser(tempBook, tempStatus);\n\n        $($this).removeClass('books__status-options--active');\n    });\n\n    $('.nav__books-search-input').on('keydown', function (e) {\n        if (e.keyCode == 13) {\n            var query = e.target.value;\n            window.location.href = window.location.origin + '/search/' + query;\n        }\n    });\n});\n\n//=========================\n// POST TO SERVER\n//=========================\n//send book to the API\nfunction addBookToUser(tBook, tStatus) {\n    //set book status\n    tBook.status = tStatus;\n\n    //define post options\n    var tempPostOptions = { url: '/api/v1/books/addToUser', data: tBook, method: 'POST' };\n\n    //post to API\n    $.post(tempPostOptions).then(function (tempResults) {\n        console.log(tempResults);\n    });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3ByaXZhdGUvanMvc2VhcmNoLmpzPzY2NjUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEJVVFRPTiBIQU5ETEVSU1xuLy89PT09PT09PT09PT09PT09PT09PT09PT09XG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG5cbiAgICAkKCcuYm9va3NfX3N0YXR1cy13cmFwcGVyJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdmFyICR0aGlzID0gdGhpcztcbiAgICAgICAgLy8gY29uc29sZS5sb2coJHRoaXMpXG4gICAgICAgICQoJHRoaXMpLmNoaWxkcmVuKCcuYm9va3NfX3N0YXR1cy1vcHRpb25zJykuYWRkQ2xhc3MoJ2Jvb2tzX19zdGF0dXMtb3B0aW9ucy0tYWN0aXZlJyk7XG4gICAgfSk7XG5cbiAgICAkKCcuYm9va3NfX3N0YXR1cy1vcHRpb25zJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKHRFdmVudCkge1xuICAgICAgICB0RXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgdmFyICR0aGlzID0gdGhpcztcbiAgICAgICAgLy8gY29uc29sZS5sb2coJHRoaXMpXG4gICAgICAgIC8vZ2V0IHN0YXR1cyB0aGF0IHdhcyBwYXNzZWQgb24gdGhlIGJ1dHRvbiBjbGlja2VkXG4gICAgICAgIHZhciB0ZW1wU3RhdHVzID0gdEV2ZW50LnRhcmdldC5kYXRhc2V0LnN0YXR1cztcblxuICAgICAgICBjb25zb2xlLmxvZyh0ZW1wU3RhdHVzKTtcbiAgICAgICAgLy9kZWZpbmUgYm9vayhmcm9tIHRoZSBwYXJlbnQpIGFuZCBhZGQgc3RhdHVzXG4gICAgICAgIHZhciBib29rRGF0YSA9ICQoJHRoaXMpLmNsb3Nlc3QoJy5tYWluX19ib29rcy13cmFwcGVyJylbMF0uZGF0YXNldC5ib29rO1xuICAgICAgICB2YXIgdGVtcEJvb2sgPSBKU09OLnBhcnNlKGJvb2tEYXRhKTtcbiAgICAgICAgYWRkQm9va1RvVXNlcih0ZW1wQm9vaywgdGVtcFN0YXR1cyk7XG5cbiAgICAgICAgJCgkdGhpcykucmVtb3ZlQ2xhc3MoJ2Jvb2tzX19zdGF0dXMtb3B0aW9ucy0tYWN0aXZlJyk7XG4gICAgfSk7XG5cbiAgICAkKCcubmF2X19ib29rcy1zZWFyY2gtaW5wdXQnKS5vbigna2V5ZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChlLmtleUNvZGUgPT0gMTMpIHtcbiAgICAgICAgICAgIHZhciBxdWVyeSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgJy9zZWFyY2gvJyArIHF1ZXJ5O1xuICAgICAgICB9XG4gICAgfSk7XG59KTtcblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBQT1NUIFRPIFNFUlZFUlxuLy89PT09PT09PT09PT09PT09PT09PT09PT09XG4vL3NlbmQgYm9vayB0byB0aGUgQVBJXG5mdW5jdGlvbiBhZGRCb29rVG9Vc2VyKHRCb29rLCB0U3RhdHVzKSB7XG4gICAgLy9zZXQgYm9vayBzdGF0dXNcbiAgICB0Qm9vay5zdGF0dXMgPSB0U3RhdHVzO1xuXG4gICAgLy9kZWZpbmUgcG9zdCBvcHRpb25zXG4gICAgdmFyIHRlbXBQb3N0T3B0aW9ucyA9IHsgdXJsOiAnL2FwaS92MS9ib29rcy9hZGRUb1VzZXInLCBkYXRhOiB0Qm9vaywgbWV0aG9kOiAnUE9TVCcgfTtcblxuICAgIC8vcG9zdCB0byBBUElcbiAgICAkLnBvc3QodGVtcFBvc3RPcHRpb25zKS50aGVuKGZ1bmN0aW9uICh0ZW1wUmVzdWx0cykge1xuICAgICAgICBjb25zb2xlLmxvZyh0ZW1wUmVzdWx0cyk7XG4gICAgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9wcml2YXRlL2pzL3NlYXJjaC5qc1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n//=========================\n// BUTTON HANDLERS\n//=========================\n$(document).ready(function () {\n    $(document).on(\"click\", \".books__image\", event, getUsers);\n    $(document).on(\"click\", \".books__image\", event, openSidebar);\n    $('.sidebar__button-close').on(\"click\", event, closeSidebar);\n});\n\n//=========================\n// GET TO SERVER\n//=========================\n//send bookid to the API\nfunction getUsers(tBookId) {\n    console.log(\"ive been clicked\");\n    var $this = this;\n\n    var id = $($this).attr('data-id');\n    var title = $($this).attr('data-title');\n    var author = $($this).attr('data-author');\n    var imgurl = $($this).attr('data-imgurl');\n\n    $.get({ url: \"/api/v1/users/\" + id }).then(function (results) {\n        console.log(results);\n\n        var $userId = $('.profile__main-name').attr('data-id');\n\n        var $sidebarHeading = $('.sidebar__heading');\n        var $bookWrapper = $('.sidebar__book-wrapper');\n        var $userWrapper = $('.sidebar__user-wrapper');\n\n        if (results.length > 0) {\n\n            var bookhtml = '';\n            var userhtml = '';\n\n            userhtml += \"\\n                    \\n                    \";\n\n            for (var index = 0; index < results.length; index++) {\n                var element = results[index];\n\n                if (element.id != $userId) {\n\n                    userhtml += \"\\n                            <div class=\\\"sidebar__profile-wrapper\\\">\\n                                <div class=\\\"sidebar__profile-avatar\\\">\\n                                    <img src='http://via.placeholder.com/150x200' alt=\\\"profile image\\\">\\n                                </div>\\n                                <div class=\\\"sidebar__profile-info\\\">\\n                                    <h3 class=\\\"sidebar__profile-name\\\">\" + element.user_name + \"</h3>\\n                                    <form action=\\\"/messages/\" + element.id + \"\\\">\\n                                        <button class=\\\"sidebar__profile-message\\\">Message</button>\\n                                    </form>\\n                                </div>\\n                            </div>\\n                            \";\n                }\n            }\n\n            $userWrapper.html(userhtml);\n            $sidebarHeading.children().remove();\n        } else {\n\n            var _$sidebarHeading = $('.sidebar__heading');\n\n            var html = \"\\n                        <h1>No users are currently reading this book</h1>\\n                    \";\n\n            $bookWrapper.children().remove();\n            $userWrapper.children().remove();\n            _$sidebarHeading.html(html);\n        }\n    });\n}\n\nfunction openSidebar() {\n    $('.main__books').addClass('main__books--active');\n    $('.sidebar__users').addClass('sidebar__users--active');\n    $('.sidebar__button-close').addClass('sidebar__button-close--visible');\n}\n\nfunction closeSidebar() {\n    $('.main__books').removeClass('main__books--active');\n    $('.sidebar__users').removeClass('sidebar__users--active');\n    $('.sidebar__button-close').removeClass('sidebar__button-close--visible');\n\n    $('.sidebar__heading').children().remove();\n    $('.sidebar__book-wrapper').children().remove();\n    $('.sidebar__user-wrapper').children().remove();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3ByaXZhdGUvanMvZGFzaGJvYXJkLmpzP2EzYTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gQlVUVE9OIEhBTkRMRVJTXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT1cbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAkKGRvY3VtZW50KS5vbihcImNsaWNrXCIsIFwiLmJvb2tzX19pbWFnZVwiLCBldmVudCwgZ2V0VXNlcnMpO1xuICAgICQoZG9jdW1lbnQpLm9uKFwiY2xpY2tcIiwgXCIuYm9va3NfX2ltYWdlXCIsIGV2ZW50LCBvcGVuU2lkZWJhcik7XG4gICAgJCgnLnNpZGViYXJfX2J1dHRvbi1jbG9zZScpLm9uKFwiY2xpY2tcIiwgZXZlbnQsIGNsb3NlU2lkZWJhcik7XG59KTtcblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBHRVQgVE8gU0VSVkVSXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vc2VuZCBib29raWQgdG8gdGhlIEFQSVxuZnVuY3Rpb24gZ2V0VXNlcnModEJvb2tJZCkge1xuICAgIGNvbnNvbGUubG9nKFwiaXZlIGJlZW4gY2xpY2tlZFwiKTtcbiAgICB2YXIgJHRoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGlkID0gJCgkdGhpcykuYXR0cignZGF0YS1pZCcpO1xuICAgIHZhciB0aXRsZSA9ICQoJHRoaXMpLmF0dHIoJ2RhdGEtdGl0bGUnKTtcbiAgICB2YXIgYXV0aG9yID0gJCgkdGhpcykuYXR0cignZGF0YS1hdXRob3InKTtcbiAgICB2YXIgaW1ndXJsID0gJCgkdGhpcykuYXR0cignZGF0YS1pbWd1cmwnKTtcblxuICAgICQuZ2V0KHsgdXJsOiBcIi9hcGkvdjEvdXNlcnMvXCIgKyBpZCB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdHMpO1xuXG4gICAgICAgIHZhciAkdXNlcklkID0gJCgnLnByb2ZpbGVfX21haW4tbmFtZScpLmF0dHIoJ2RhdGEtaWQnKTtcblxuICAgICAgICB2YXIgJHNpZGViYXJIZWFkaW5nID0gJCgnLnNpZGViYXJfX2hlYWRpbmcnKTtcbiAgICAgICAgdmFyICRib29rV3JhcHBlciA9ICQoJy5zaWRlYmFyX19ib29rLXdyYXBwZXInKTtcbiAgICAgICAgdmFyICR1c2VyV3JhcHBlciA9ICQoJy5zaWRlYmFyX191c2VyLXdyYXBwZXInKTtcblxuICAgICAgICBpZiAocmVzdWx0cy5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgICAgIHZhciBib29raHRtbCA9ICcnO1xuICAgICAgICAgICAgdmFyIHVzZXJodG1sID0gJyc7XG5cbiAgICAgICAgICAgIHVzZXJodG1sICs9IFwiXFxuICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgIFwiO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgcmVzdWx0cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHJlc3VsdHNbaW5kZXhdO1xuXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaWQgIT0gJHVzZXJJZCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHVzZXJodG1sICs9IFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNpZGViYXJfX3Byb2ZpbGUtd3JhcHBlclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzaWRlYmFyX19wcm9maWxlLWF2YXRhclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9J2h0dHA6Ly92aWEucGxhY2Vob2xkZXIuY29tLzE1MHgyMDAnIGFsdD1cXFwicHJvZmlsZSBpbWFnZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNpZGViYXJfX3Byb2ZpbGUtaW5mb1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPVxcXCJzaWRlYmFyX19wcm9maWxlLW5hbWVcXFwiPlwiICsgZWxlbWVudC51c2VyX25hbWUgKyBcIjwvaDM+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPVxcXCIvbWVzc2FnZXMvXCIgKyBlbGVtZW50LmlkICsgXCJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJzaWRlYmFyX19wcm9maWxlLW1lc3NhZ2VcXFwiPk1lc3NhZ2U8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHVzZXJXcmFwcGVyLmh0bWwodXNlcmh0bWwpO1xuICAgICAgICAgICAgJHNpZGViYXJIZWFkaW5nLmNoaWxkcmVuKCkucmVtb3ZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIHZhciBfJHNpZGViYXJIZWFkaW5nID0gJCgnLnNpZGViYXJfX2hlYWRpbmcnKTtcblxuICAgICAgICAgICAgdmFyIGh0bWwgPSBcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5ObyB1c2VycyBhcmUgY3VycmVudGx5IHJlYWRpbmcgdGhpcyBib29rPC9oMT5cXG4gICAgICAgICAgICAgICAgICAgIFwiO1xuXG4gICAgICAgICAgICAkYm9va1dyYXBwZXIuY2hpbGRyZW4oKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICR1c2VyV3JhcHBlci5jaGlsZHJlbigpLnJlbW92ZSgpO1xuICAgICAgICAgICAgXyRzaWRlYmFySGVhZGluZy5odG1sKGh0bWwpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIG9wZW5TaWRlYmFyKCkge1xuICAgICQoJy5tYWluX19ib29rcycpLmFkZENsYXNzKCdtYWluX19ib29rcy0tYWN0aXZlJyk7XG4gICAgJCgnLnNpZGViYXJfX3VzZXJzJykuYWRkQ2xhc3MoJ3NpZGViYXJfX3VzZXJzLS1hY3RpdmUnKTtcbiAgICAkKCcuc2lkZWJhcl9fYnV0dG9uLWNsb3NlJykuYWRkQ2xhc3MoJ3NpZGViYXJfX2J1dHRvbi1jbG9zZS0tdmlzaWJsZScpO1xufVxuXG5mdW5jdGlvbiBjbG9zZVNpZGViYXIoKSB7XG4gICAgJCgnLm1haW5fX2Jvb2tzJykucmVtb3ZlQ2xhc3MoJ21haW5fX2Jvb2tzLS1hY3RpdmUnKTtcbiAgICAkKCcuc2lkZWJhcl9fdXNlcnMnKS5yZW1vdmVDbGFzcygnc2lkZWJhcl9fdXNlcnMtLWFjdGl2ZScpO1xuICAgICQoJy5zaWRlYmFyX19idXR0b24tY2xvc2UnKS5yZW1vdmVDbGFzcygnc2lkZWJhcl9fYnV0dG9uLWNsb3NlLS12aXNpYmxlJyk7XG5cbiAgICAkKCcuc2lkZWJhcl9faGVhZGluZycpLmNoaWxkcmVuKCkucmVtb3ZlKCk7XG4gICAgJCgnLnNpZGViYXJfX2Jvb2std3JhcHBlcicpLmNoaWxkcmVuKCkucmVtb3ZlKCk7XG4gICAgJCgnLnNpZGViYXJfX3VzZXItd3JhcHBlcicpLmNoaWxkcmVuKCkucmVtb3ZlKCk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9wcml2YXRlL2pzL2Rhc2hib2FyZC5qc1xuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n")}]);